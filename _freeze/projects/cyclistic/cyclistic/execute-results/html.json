{
  "hash": "5fbe75409fa8c7727c1c44005020b72b",
  "result": {
    "markdown": "---\ntitle: \"Cyclistic Customer Analysis\"\nsubtitle: \"Google Data Analytics Certificate Capstone\"\ndate: today\nimage: images/josh-mccausland-8TfeD3J4VtQ-unsplash.jpg\ntitle-block-banner: true\nformat:\n  html:\n    highlight-style: breezedark\n    df-print: kable\n    code-fold: true\nabstract-title: \"Summary\"\nabstract: \"An analysis of historical Divvy Bikes ride data to identify differences in user cohort behaviour.\"\nparams:\n  start_date: \"September 2021\"\n  end_date: \"August 2022\"\n  lease: \"12345\"\neditor:\n  markdown:\n    wrap: sentence\n---\n\n\n# Background\n\nIn 2016 Cyclistic launched a bike-sharing sharing offering which has grown to a fleet of 6000 geotracked bicycles and network of more than 1000 stations across Chicago.\n\nAnalysis by Cyclistic's finance team has determined that riders who purchase annual memberships are more profitable than casual riders.\n\nHead of marketing, Lily Moreno, has set a goal of designing marketing strategies aimed at converting casual riders to members.\nThe intial step is to better understand how casual users and members differ.\nThis information will provide a basis for members of the marketing analytics team to investigate why casual riders might purchase a membership, and how digital media could influence marketing strategy.\n\nThe executive team, which is detail oriented, will decide whether the proposed marketing strategies are approved.\n\n# Defining the business task\n\nThe scope of this analysis is limited to the first step, and investigates the question:\n\n> How do annual members and casual riders use Cyclistic bikes differently?\n\nUnpacking this question highlights a number of areas that may provide useful insights.\n\n#### What defines a member and a casual rider?\n\nThe Divvy Bikes pricing information indicates members pay an upfront annual fee to access pricing that includes \"no-charge\" ride time and lower per minute charges.\nCasual riders access ride sharing on an ad-hoc basis, paying a per-ride charge, and higher per minute charge which begins when the bike is undocked.\nDaily pass riders pay a day access fee to access unlimited 3 hour rides for the duration of the pass.\n\n#### What influence do the plans have on the user behaviour?\n\nCan we distinguish plan types by the average duration of rides?\nWhat percentage of riders exceed the included 45 minutes ride time of membership plans?\nIs this same for members and casuals?\n\nThis may help identify if time inclusions are a factor for casual riders considering membership.\n\n#### When do different user cohorts ride?\n\nWhich days, and times are popular for the different cohorts?\nAnd are there identifiable differences or commonality in behaviours?\n\n#### Does weather influence rider behaviour?\n\nAre the types and number of rides related to day-to-day variations in weather or broader seasonal patterns?\nAre casual users \"all season\" or \"fair weather\" riders?\nCasual riders who ride around the year could be a group that would find membership attractive.\n\n#### Where do different user cohorts ride?\n\nRiders commuting to work are likely to use docking stations in business districts during the week.\nRecreational riders may prefer parks and areas along the shoreline or cafe precincts.\nDocking stations with high levels of usage on different days of the week should provide insight into where user hotspots are located.\n\n# Data sources\n\n### Divvy Bikes system data and pricing\n\nThe base data for individual rides was extracted from Divvy Bike data files covering the period 1 September 2021 to 31 August 2022.\nAdditional data description and a download link is provided on the Divvy Bikes [system data](https://ride.divvybikes.com/system-data) page.\n\nThe [license](https://ride.divvybikes.com/data-license-agreement) allows inclusion of data within analyses and studies published for non-commercial.\nThis clause covers the intended use.\n\nDetails of current [pricing](https://ride.divvybikes.com/pricing) for Divvy Bikes offerings was accessed on 25 September 2022.\n\n### NOAA Climate Data\n\nWeather data covering September 2021 to August 2022 ordered from [NOOA National Centers for Environmental Information](https://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:USW00094846/detail)\n\nO'Hare International Airport weather station was selected as representative of the Chicago region.\n\n### Divvy Bikes historical station status\n\nHistorical station status identifies which stations actively used between September 2021 and August 2022.\nThis information is used to assist identifying Divvy operational rides in the data set.\n\n[City of Chicago open data listing of Divvy Stations](https://data.cityofchicago.org/Transportation/Divvy-Bicycle-Stations/bbyy-e7gq)\n\n# Data cleaning and preparation\n\n### Initial import\n\n\n::: {.cell}\n\n:::\n\n\n\nThe Divvy trip data files have a consistent naming format `YYYYMM-divvy-tripdata.zip`.\nThis allows file names to be generated for months in the range September 2021 to August 2022.\n\n\n::: {.cell}\n\n```{.r .cell-code  caption=\"Building file list\"}\ndivvy_files <- seq(\n  my(params$start_date),\n  my(params$end_date),\n  by = \"months\"\n) %>%\n  enframe(\n    value = \"timestamp\"\n  ) %>%\n  glue_data(\n    \"{year(timestamp)}\",\n    \"{stringi::stri_sprintf('%02d', month(timestamp))}\",\n    \"-divvy-tripdata.zip\"\n  )\n```\n:::\n\n\nTo preserve a local copy of the original data, zip files are downloaded to the `data/raw` folder.\nThe folder is checked each time the script is run, and files which are already present are removed from the download list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndivvy_downloaded <- glue(\"data/raw/{divvy_files}\")\nto_dl <- divvy_files[!file.exists(divvy_downloaded)]\n```\n:::\n\n\nAny files which are not present in the `data/raw`folder are downloaded.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note that the preceding section will not execute\n# correctly in a Quarto document.\n# A script for the full import process can be found in the\n# Github repository.\n\nif (length(to_dl) > 0) {\n  download.file(\n    glue(\"https://divvy-tripdata.s3.amazonaws.com/{to_dl}\"),\n    glue(\"data/raw/{to_dl}\")\n  )\n}\n```\n:::\n\n\nThe first 1000 rows are read from September 2021 zip file.\nThis allows `read_csv` to determine the type of data in each column.\nThe \"guessed\" column type specification can then inspected using the `spec` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_inspect <- map_dfr(\n  divvy_downloaded[1],\n  ~ archive_read(.) %>%\n    read_csv(\n      n_max = 1000,\n      show_col_types = FALSE\n    )\n)\nspec(bike_inspect)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  ride_id = col_character(),\n  rideable_type = col_character(),\n  started_at = col_datetime(format = \"\"),\n  ended_at = col_datetime(format = \"\"),\n  start_station_name = col_character(),\n  start_station_id = col_character(),\n  end_station_name = col_character(),\n  end_station_id = col_character(),\n  start_lat = col_double(),\n  start_lng = col_double(),\n  end_lat = col_double(),\n  end_lng = col_double(),\n  member_casual = col_character()\n)\n```\n:::\n:::\n\n\nThe types defined in the column specification appear to be reasonable choices based on naming of the columns.\n\nTo verify column naming is consistent across all files, the header row from each file is read.\nThe resulting data frame is processed using `distinct()` to eliminate duplicated rows.\nIf all headers are identical the resulting data frame will have a single row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_headers <- map_dfr(\n  divvy_downloaded,\n  ~ archive_read(.) %>%\n    read_csv(\n      n_max = 1,\n      col_names = FALSE,\n      show_col_types = FALSE\n    )\n) %>%\n  distinct()\n\nstr(bike_headers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [1 Ã— 13] (S3: tbl_df/tbl/data.frame)\n $ X1 : chr \"ride_id\"\n $ X2 : chr \"rideable_type\"\n $ X3 : chr \"started_at\"\n $ X4 : chr \"ended_at\"\n $ X5 : chr \"start_station_name\"\n $ X6 : chr \"start_station_id\"\n $ X7 : chr \"end_station_name\"\n $ X8 : chr \"end_station_id\"\n $ X9 : chr \"start_lat\"\n $ X10: chr \"start_lng\"\n $ X11: chr \"end_lat\"\n $ X12: chr \"end_lng\"\n $ X13: chr \"member_casual\"\n```\n:::\n:::\n\n\nAfter verifying the detected formats, and checking column naming is consistent across all files, the full dataset can be imported.\nPassing the full column specification to `read_csv()` ensure that data which does not match the expected type is flagged as a problem.\nIssues that arise while importing data can be examined using the `problems()` function.\n\n\n::: {.cell hash='cyclistic_cache/html/code-import-from-zip_0ef5ebe9f08921c121f122a1baa89f46'}\n\n```{.r .cell-code}\nbike_rides <- map_dfr(\n  divvy_downloaded,\n  ~ archive_read(.) %>%\n    read_csv(\n      col_types = cols(\n        ride_id = col_character(),\n        rideable_type = col_factor(levels = c(\n          \"classic_bike\",\n          \"docked_bike\",\n          \"electric_bike\"\n        )),\n        started_at = col_datetime(),\n        ended_at = col_datetime(),\n        start_station_name = col_character(),\n        start_station_id = col_character(),\n        end_station_name = col_character(),\n        end_station_id = col_character(),\n        start_lat = col_double(),\n        start_lng = col_double(),\n        end_lat = col_double(),\n        end_lng = col_double(),\n        member_casual = col_factor(levels = c(\n          \"member\",\n          \"casual\"\n        ))\n      ),\n      locale = locale(tz = \"America/Chicago\")\n    )\n)\n```\n:::\n\n\n### Data inspection\n\nWith the data loaded from file, the data structure can checked with `glimpse()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_rides %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,883,043\nColumns: 13\n$ ride_id            <chr> \"9DC7B962304CBFD8\", \"F930E2C6872D6B32\", \"6EF7213790â€¦\n$ rideable_type      <fct> electric_bike, electric_bike, electric_bike, electrâ€¦\n$ started_at         <dttm> 2021-09-28 16:07:10, 2021-09-28 14:24:51, 2021-09-â€¦\n$ ended_at           <dttm> 2021-09-28 16:09:54, 2021-09-28 14:40:05, 2021-09-â€¦\n$ start_station_name <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Clark St &â€¦\n$ start_station_id   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"TA13070001â€¦\n$ end_station_name   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,â€¦\n$ end_station_id     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,â€¦\n$ start_lat          <dbl> 41.89000, 41.94000, 41.81000, 41.80000, 41.88000, 4â€¦\n$ start_lng          <dbl> -87.68000, -87.64000, -87.72000, -87.72000, -87.740â€¦\n$ end_lat            <dbl> 41.89, 41.98, 41.80, 41.81, 41.88, 41.88, 41.74, 41â€¦\n$ end_lng            <dbl> -87.67, -87.67, -87.72, -87.72, -87.71, -87.74, -87â€¦\n$ member_casual      <fct> casual, casual, casual, casual, casual, casual, casâ€¦\n```\n:::\n:::\n\n\nThe output indicates that the data set has 5883043 rows, and 13 columns.\nThe `start_station_name`, `start_stattion_id`, `end_station_name` and `end_station_id` columns appear to have a number of missing values - identified by `NA`.\n\nThe extent of the missing information can be assessed by counting the number of `NA` values in each column.\n\n\n::: {#tbl-missing-values .cell tbl-cap='Missing Values'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(across(\n    everything(),\n    ~ sum(is.na(.x))\n  )) %>%\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Missing Count\"\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Column             | Missing Count|\n|:------------------|-------------:|\n|ride_id            |             0|\n|rideable_type      |             0|\n|started_at         |             0|\n|ended_at           |             0|\n|start_station_name |        884365|\n|start_station_id   |        884363|\n|end_station_name   |        946303|\n|end_station_id     |        946303|\n|start_lat          |             0|\n|start_lng          |             0|\n|end_lat            |          5727|\n|end_lng            |          5727|\n|member_casual      |             0|\n\n</div>\n:::\n:::\n\n\n@tbl-missing-values indicates a significant number of records are missing end and start station name and id.\nEnd station location information is also missing small number of records.\nAll other columns have complete data.\n\n\n::: {#tbl-missing-by-station .cell tbl-cap='Missing Values by station type'}\n\n```{.r .cell-code}\nbike_rides %>%\n  mutate(\n    missing_start = is.na(start_station_name),\n    missing_end = is.na(end_station_name)\n  ) %>%\n  summarise(\n    \"Start Only\" = sum(missing_start & !missing_end),\n    \"End Only\" = sum(missing_end & !missing_start),\n    Both = sum(missing_start & missing_end),\n    \"Rides effected\" = sum(missing_start | missing_end)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Start Only| End Only|   Both| Rides effected|\n|----------:|--------:|------:|--------------:|\n|     376594|   438532| 507771|        1322897|\n\n</div>\n:::\n:::\n\n\n@tbl-missing-by-station indicates that 22.49% of all rides are missing data for at least one docking station.\nThis represents significant number of data points, and should be checked to determine whether this is an error or there have been systematic changes made.\n\n\n::: {#tbl-coord-range .cell tbl-cap='Latitude and Longitude ranges'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(\n    start_lat = range(start_lat, na.rm = TRUE),\n    start_lng = range(start_lng, na.rm = TRUE),\n    end_lat = range(end_lat, na.rm = TRUE),\n    end_lng = range(end_lng, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| start_lat| start_lng| end_lat| end_lng|\n|---------:|---------:|-------:|-------:|\n|  41.64000| -87.84000|   41.39|  -88.97|\n|  45.63503| -73.79648|   42.37|  -87.50|\n\n</div>\n:::\n:::\n\n\nThe maximum start longitude and latitude values listed in @tbl-coord-range are significantly different to the remaining values.\nThis suggests some rides may have originated outside the Chicago metropolitan area serviced by Cyclistic.\n\nIt appears that some latitude and longitude values may have been rounded to two significant digits.\nComparing the value to itself rounded to 2 decimal places identifies potentially truncated values.\nClamping the coordinates in this way means actual locations can be anywhere within 1 square kilometre area centred on the given grid location.\n\n\n::: {#tbl-clipped-start .cell tbl-cap='Clipped coordinates and missing start station name'}\n\n```{.r .cell-code}\nbike_rides %>%\n  group_by(Missing = is.na(start_station_id)) %>%\n  summarise(\n    Latitude = sum(start_lat == round(start_lat, 2), na.rm = TRUE),\n    Longitude = sum(start_lng == round(start_lng, 2), na.rm = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Missing | Latitude| Longitude|\n|:-------|--------:|---------:|\n|FALSE   |    78535|     78530|\n|TRUE    |   884363|    884363|\n\n</div>\n:::\n:::\n\n\nComparing @tbl-missing-values with @tbl-clipped-start indicates the count of start stations with missing names is the same as those which have rounded coordinates.\n\n\n::: {#tbl-clipped-end .cell tbl-cap='Clipped coordinates and missing end station name'}\n\n```{.r .cell-code}\nbike_rides %>%\n  group_by(Missing = is.na(end_station_id)) %>%\n  summarise(\n    Latitude = sum(end_lat == round(end_lat, 2), na.rm = TRUE),\n    Longitude = sum(end_lng == round(end_lng, 2), na.rm = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Missing | Latitude| Longitude|\n|:-------|--------:|---------:|\n|FALSE   |    71004|     71002|\n|TRUE    |   940576|    940576|\n\n</div>\n:::\n:::\n\n\nComparing @tbl-missing-values with @tbl-clipped-end indicates the combined count of end stations with missing latitude and longitude and those with rounded coordinates matches the count of missing end station names.\n\nThis suggests that there is a systemic reason for the missing data, rather than error.\nIt seems likely the location data has been anonymised to protect riders privacy.\nThis needs to be verified with Cyclistics data collection team.\n\nThe ride duration and other information appear plausible and the lack of location data does not impact analysis of this data.\nRecords with missing location information will be retained but filtered for any analysis which depends on accurate location.\n\nWhile the majority of rounded coordinates occur where station names are missing approximately 8% are for stations which are named.\nThese need to be checked during cleaning.\n\n\n::: {#tbl-date-ranges .cell tbl-cap='Ride start and end date ranges'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(\n    start_range = range(started_at),\n    end_range = range(ended_at)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|start_range         |end_range           |\n|:-------------------|:-------------------|\n|2021-09-01 00:00:06 |2021-09-01 00:00:41 |\n|2022-08-31 23:59:39 |2022-09-06 21:49:04 |\n\n</div>\n:::\n:::\n\n\n@tbl-date-ranges indicates the dataset includes rides which finished after August 2022.\n\n\n::: {.cell}\n\n:::\n\n\nIn total 6431 rides are active at midnight on 31 August 2022.\nOf these, 48 rides are still active at 9.00am on 1 September 2022.\nAs these overnight rides are excluded from the start of the data set, I've opted to retain rides which completed prior to 9.00am to ensure this group of riders is not under represented.\n\n### Data Cleaning\n\n#### Missing end station coordinates\n\nThe end stations with missing name and coordinates are addressed first.\n\n\n::: {#tbl-no-end-coords .cell tbl-cap='Missing end station coordinates'}\n\n```{.r .cell-code}\nno_end_coords <- bike_rides %>%\n  filter(is.na(end_lat), is.na(end_lng))\n\nno_end_coords %>%\n  select(\n    -ride_id,\n    -starts_with(\"start_\")\n  ) %>%\n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|rideable_type |started_at          |ended_at            |end_station_name |end_station_id | end_lat| end_lng|member_casual |\n|:-------------|:-------------------|:-------------------|:----------------|:--------------|-------:|-------:|:-------------|\n|classic_bike  |2021-09-21 15:09:23 |2021-09-21 16:40:03 |NA               |NA             |      NA|      NA|casual        |\n|classic_bike  |2021-09-26 08:32:12 |2021-09-26 11:50:59 |NA               |NA             |      NA|      NA|casual        |\n|classic_bike  |2021-09-04 13:52:02 |2021-09-04 17:21:15 |NA               |NA             |      NA|      NA|casual        |\n|classic_bike  |2021-09-22 10:01:36 |2021-09-23 11:01:27 |NA               |NA             |      NA|      NA|casual        |\n|classic_bike  |2021-09-10 22:48:46 |2021-09-11 23:48:39 |NA               |NA             |      NA|      NA|casual        |\n|classic_bike  |2021-09-15 01:53:24 |2021-09-16 02:53:18 |NA               |NA             |      NA|      NA|casual        |\n\n</div>\n:::\n:::\n\n\nThe preview of these rides contains several rides which extend for more than a day.\nCyclistic treat bikes unlocked for more than 24 hours as stolen.\nThese rides are likely to be bikes that have been reported stolen and not physically docked at the ride termination time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_end_coords %>%\n  mutate(member_casual = recode(\n    member_casual,\n    \"member\" = \"Member\", \"casual\" = \"Casual\"\n  )) %>%\n  group_by(member_casual) %>%\n  summarise(triptime = as.numeric(started_at %--% ended_at, units = \"days\")) %>%\n  ggplot(aes(triptime, fill = member_casual)) +\n  geom_histogram(binwidth = 1) +\n  guides(fill = \"none\") +\n  facet_grid(rows = vars(member_casual)) +\n  labs(\n    title = \"Rides with missing end coordinates by ride type\",\n    x = \"Trip Duration in Days\",\n    y = \"Rides\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](cyclistic_files/figure-html/unnamed-chunk-16-1.svg){width=672}\n:::\n:::\n\n\nThe plot shows that around 5000 of the 5727 rides terminated after more than 24 hours.\nNotably casual rides are the biggest contributor.\n\n#### Cyclistic operational rides\n\nA list of stations that were *In-Service* between September 2021 and August 2022 was extracted from a dataset maintained by City of Chicago.\nThe dataset for the period of interest contains over 35 million rows recording the status of each docking station at hour intervals.\n\nDue to the size of the dataset the processed listing of stations is used in this analysis.\n\n\n::: {#tbl-stations-in-use .cell tbl-cap='Stations recorded as in-service'}\n\n```{.r .cell-code}\nactive_stations <- read_csv(\n  \"data/processed/stations_in_use.csv\",\n  show_col_types = FALSE\n)\n\nactive_stations %>%\n  slice_sample(n = 6) %>%\n  select(-id)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|timestamp           |station_name                  | latitude| longitude|\n|:-------------------|:-----------------------------|--------:|---------:|\n|2021-08-31 05:05:35 |Mulligan Ave & Wellington Ave | 41.93474| -87.78440|\n|2022-05-09 15:14:55 |Rockwell Ave & Touhy Ave      | 42.01234| -87.69538|\n|2021-11-04 18:45:35 |Augusta Blvd & Laramie Ave    | 41.89866| -87.75545|\n|2021-08-31 05:05:35 |Throop St & Taylor St         | 41.86897| -87.65914|\n|2021-08-31 05:05:35 |Mason Ave & Belmont Ave       | 41.93814| -87.77493|\n|2021-08-31 05:05:35 |S Wentworth Ave & W 111th St  | 41.69262| -87.62805|\n\n</div>\n:::\n:::\n\n\nA random sample of stations from the dataset is shown in @tbl-stations-in-use.\nThe timestamp indicates the first time a station appears as *In-Service* in the original dataset.\n\nThe active stations dataset is used to identify stations that were not listed as publicly available.\n\n\n::: {#tbl-unlisted-stations .cell tbl-cap='Unlisted stations'}\n\n```{.r .cell-code}\nunlisted_start <- bike_rides %>%\n  anti_join(\n    active_stations,\n    by = c(\"start_station_name\" = \"station_name\")\n  ) %>%\n  select(\n    station_name = start_station_name,\n    station_id = start_station_id\n  )\n\nunlisted_end <- bike_rides %>%\n  anti_join(\n    active_stations,\n    by = c(\"end_station_name\" = \"station_name\")\n  ) %>%\n  select(\n    station_name = end_station_name,\n    station_id = end_station_id\n  )\n\nunlisted_stations <- unlisted_start %>%\n  bind_rows(unlisted_end) %>%\n  drop_na(station_name, station_id) %>%\n  group_by(station_name, station_id) %>%\n  summarise(count = n())\n\nunlisted_stations\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|station_name                                 |station_id                                   | count|\n|:--------------------------------------------|:--------------------------------------------|-----:|\n|Base - 2132 W Hubbard                        |Hubbard Bike-checking (LBS-WH-TEST)          |  1182|\n|Base - 2132 W Hubbard Warehouse              |Hubbard Bike-checking (LBS-WH-TEST)          |   963|\n|Bissell St & Armitage Ave - Charging         |Bissell St & Armitage Ave - Charging         |    38|\n|Bissell St & Armitage Ave - Charging         |chargingstx1                                 |     2|\n|DIVVY CASSETTE REPAIR MOBILE STATION         |DIVVY CASSETTE REPAIR MOBILE STATION         |     8|\n|Hastings WH 2                                |Hastings WH 2                                |     5|\n|Lincoln Ave & Roscoe St - Charging           |Lincoln Ave & Roscoe St - Charging           |     6|\n|NewHastings                                  |2059 Hastings Warehouse Station              |    47|\n|Pawel Bialowas - Test- PBSC charging station |Pawel Bialowas - Test- PBSC charging station |     2|\n|Public Rack - Kedzie Ave &amp; 62nd Pl       |1038                                         |     1|\n|Throop/Hastings Mobile Station               |Throop/Hastings Mobile Station               |     3|\n|WEST CHI-WATSON                              |DIVVY 001                                    |    21|\n|WEST CHI-WATSON                              |DIVVY 001 - Warehouse test station           |     4|\n|WestChi                                      |DIVVY 001 - Warehouse test station           |     6|\n|Wilton Ave & Diversey Pkwy - Charging        |Wilton Ave & Diversey Pkwy - Charging        |    38|\n\n</div>\n:::\n:::\n\n\n@tbl-unlisted-stations summarises stations which appear in `bike_rides` without a corresponding match in the `active_stations` dataset.\n\nThe majority of stations in the table appear to have an operational function.\nThose ending with \"- Charging\" appear to be associated with testing of new charging stations prior to the company publicly announcing their availability.\n\n#### Removing operational and no-return rides\n\nBefore proceeding with further manipulation and cleaning, the observations with identified problems should be removed.\nThis is done using `dplyr::anti_join()` to filter the `bike_rides` dataset removing items matching those found in the `unlisted_stations` and `no_end_coords` data.frames.\n\n\n::: {#tbl-remove-operational .cell tbl-cap='Sample of cleaned data' hash='cyclistic_cache/html/tbl-remove-operational_b8432feec2c9b5fdde939e8f626eee88'}\n\n```{.r .cell-code}\nbike_rides <- bike_rides %>%\n  anti_join(\n    unlisted_stations,\n    by = c(\"start_station_name\" = \"station_name\")\n  ) %>%\n  anti_join(\n    unlisted_stations,\n    by = c(\"end_station_name\" = \"station_name\")\n  ) %>%\n  anti_join(\n    no_end_coords,\n    by = \"ride_id\"\n  )\n\nbike_rides %>%\n  slice_sample(n = 6)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|ride_id          |rideable_type |started_at          |ended_at            |start_station_name                                  |start_station_id |end_station_name             |end_station_id | start_lat| start_lng|  end_lat|   end_lng|member_casual |\n|:----------------|:-------------|:-------------------|:-------------------|:---------------------------------------------------|:----------------|:----------------------------|:--------------|---------:|---------:|--------:|---------:|:-------------|\n|89A40A49DBAA4B29 |electric_bike |2021-10-01 16:41:45 |2021-10-01 16:48:50 |Larrabee St & Division St                           |KA1504000079     |Larrabee St & Armitage Ave   |TA1309000006   |  41.90342| -87.64311| 41.91814| -87.64384|member        |\n|E8331ADF76B98BCD |electric_bike |2022-06-08 21:31:44 |2022-06-08 21:33:53 |Wells St & Elm St                                   |KA1504000135     |Franklin St & Chicago Ave    |13017          |  41.90283| -87.63467| 41.89675| -87.63567|member        |\n|8547CC66FF7562FD |classic_bike  |2021-12-10 13:36:26 |2021-12-10 13:39:21 |LaSalle Dr & Huron St                               |KP1705001026     |Dearborn Pkwy & Delaware Pl  |TA1307000128   |  41.89488| -87.63233| 41.89897| -87.62991|casual        |\n|7D1F8A0290344979 |electric_bike |2022-04-11 16:19:25 |2022-04-11 16:24:18 |Wabash Ave & Adams St                               |KA1503000015     |Clinton St & Washington Blvd |WL-012         |  41.87930| -87.62577| 41.88338| -87.64117|member        |\n|31840C676EFDEC0E |classic_bike  |2021-10-08 13:37:29 |2021-10-08 13:52:24 |Broadway & Wilson - Truman College Vaccination Site |13074            |Sheridan Rd & Lawrence Ave   |TA1309000041   |  41.96522| -87.65814| 41.96952| -87.65469|member        |\n|1B16FEAEFB07E170 |electric_bike |2022-04-25 17:01:15 |2022-04-25 17:30:31 |NA                                                  |NA               |NA                           |NA             |  41.94000| -87.73000| 41.91000| -87.67000|casual        |\n\n</div>\n:::\n:::\n\n\n@tbl-remove-operational shows a sample of the dataset after initial cleaning.\n\n##### Named stations with rounded coordinates\nSome named stations were found to have rounded location coordinates. Additionally there is some inaccuracy of reported location coordinates.\n\nTo rectify this, the location and id information for each active station was joined to the rides dataset based on station name.\n\nJoining the `active_station` data also replaces inaccurate bike GPS location data which clusters around stations with a single official location per docking station.\n\n\n::: {.cell}\n\n```{.r .cell-code  caption=\"Clean named station coordinates\"}\nbike_rides <- bike_rides %>%\n  left_join(\n    active_stations,\n    by = c(\"start_station_name\" = \"station_name\")\n  ) %>%\n  select(-timestamp) %>%\n  left_join(\n    active_stations,\n    by = c(\"end_station_name\" = \"station_name\"),\n    suffix = c(\"_start\", \"_end\")\n  ) %>%\n  select(-timestamp) %>%\n  mutate(\n    latitude_end = if_else(\n      is.na(latitude_end),\n      end_lat,\n      latitude_end\n    ),\n    longitude_end = if_else(\n      is.na(longitude_end),\n      end_lng,\n      longitude_end\n    ),\n    latitude_start = if_else(\n      is.na(latitude_start),\n      start_lat,\n      latitude_start\n    ),\n    longitude_start = if_else(\n      is.na(longitude_start),\n      start_lng,\n      longitude_start\n    )\n  ) %>%\n  select(-ends_with(\"_lng\"), -ends_with(\"_lat\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggmap)\n\nss <- bike_rides %>%\n  mutate(\n    missing = if_else(\n      !is.na(start_station_name),\n      \"Named\",\n      \"Unnamed\"\n    ),\n    ride_day = date(started_at)\n  ) %>%\n  select(ride_day, missing, latitude_start, longitude_start) %>%\n  group_by(missing, latitude_start, longitude_start) %>%\n  summarise(\n    rides = n(),\n    avg_rides = rides / n_distinct(ride_day),\n    .groups = \"drop\"\n  )\n\n\nbounding_box <- ss %>%\n  summarise(\n    left = min(longitude_start) - 0.01,\n    bottom = min(latitude_start) - 0.01,\n    right = max(longitude_start) + 0.01,\n    top = max(latitude_start) + 0.01\n  ) %>%\n  unlist()\n\nchi_map <- get_stamenmap(\n  bounding_box,\n  maptype = \"toner-lite\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(chi_map) +\n  geom_point(\n    data = ss,\n    aes(\n      longitude_start,\n      latitude_start,\n      colour = missing\n    ),\n    size = 1,\n    alpha = 0.75\n  ) +\n  facet_grid(cols = vars(missing)) +\n  guides(colour = \"none\") +\n  scale_colour_manual(values = c(\"#52854C\", \"#D16103\")) +\n  labs(\n    title = \"Named and Unnamed Station locations\",\n    x = \"Longitude\",\n    y = \"Latitude\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](cyclistic_files/figure-html/fig-location-compare-1.svg){#fig-location-compare width=672}\n:::\n:::\n\n\n#### Ride duration\n\n##### Adding Ride Duration, Time and Day of Week\n\nTo add analysis calculated columns for the length of ride, the hour the ride started and the day of week are added to the dataset.\n\n\n::: {#tbl-add-duration .cell tbl-cap='Sample of rides with duration' hash='cyclistic_cache/html/tbl-add-duration_3c236bd9f8f0f30b55c0947b92c8d712'}\n\n```{.r .cell-code}\nbike_rides <- bike_rides %>%\n  mutate(\n    ride_int = started_at %--% ended_at,\n    ride_time = as.duration(ride_int),\n    hour = hour(started_at),\n    day = wday(started_at, label = TRUE),\n    .before = start_station_name\n  )\n\nbike_rides %>%\n  select(-ride_id, -ride_int) %>%\n  slice_sample(n = 6)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|rideable_type |started_at          |ended_at            |              ride_time| hour|day |start_station_name              |start_station_id |end_station_name                |end_station_id |member_casual | id_start| latitude_start| longitude_start| id_end| latitude_end| longitude_end|\n|:-------------|:-------------------|:-------------------|----------------------:|----:|:---|:-------------------------------|:----------------|:-------------------------------|:--------------|:-------------|--------:|--------------:|---------------:|------:|------------:|-------------:|\n|classic_bike  |2021-09-11 12:30:04 |2021-09-11 13:17:53 | 2869s (~47.82 minutes)|   12|Sat |Stony Island Ave & 67th St      |KA1503000023     |Fort Dearborn Dr & 31st St      |TA1307000048   |casual        |      102|       41.77346|       -87.58534|    150|     41.83856|     -87.60822|\n|classic_bike  |2022-02-22 22:55:54 |2022-02-22 22:56:40 |                    46s|   22|Tue |Cityfront Plaza Dr & Pioneer Ct |13427            |Cityfront Plaza Dr & Pioneer Ct |13427          |member        |      196|       41.89057|       -87.62207|    196|     41.89057|     -87.62207|\n|classic_bike  |2022-05-13 20:21:47 |2022-05-13 20:37:19 |  932s (~15.53 minutes)|   20|Fri |Delano Ct & Roosevelt Rd        |KA1706005007     |Clinton St & Jackson Blvd       |638            |casual        |      626|       41.86749|       -87.63219|    638|     41.87832|     -87.64098|\n|classic_bike  |2021-09-25 16:49:25 |2021-09-25 16:57:18 |   473s (~7.88 minutes)|   16|Sat |Halsted St & Dickens Ave        |13192            |Burling St & Diversey Pkwy      |TA1309000036   |casual        |      225|       41.91994|       -87.64883|    332|     41.93314|     -87.64776|\n|classic_bike  |2022-08-18 18:22:18 |2022-08-18 18:45:23 | 1385s (~23.08 minutes)|   18|Thu |Clinton St & Jackson Blvd       |638              |Eckhart Park                    |13289          |casual        |      638|       41.87832|       -87.64098|     86|     41.89637|     -87.66098|\n|electric_bike |2022-07-24 17:27:07 |2022-07-24 17:31:03 |   236s (~3.93 minutes)|   17|Sun |Clinton St & Lake St            |13021            |Kingsbury St & Erie St          |13265          |member        |       66|       41.88564|       -87.64182|     74|     41.89381|     -87.64170|\n\n</div>\n:::\n:::\n\n\n@tbl-add-duration shows a sample of the resulting dataset with added columns.\n\nMinimum and maximum ride times can now be checked for plausibility.\n\n\n::: {#tbl-ride-min-max .cell tbl-cap='Summary of ride duration (hours)' hash='cyclistic_cache/html/tbl-ride-min-max_5341c66ca45b33958ccb0c1054d335da'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(\n    Minimum = min(ride_time) / 3600,\n    Maximum = max(ride_time) / 3600\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   Minimum|  Maximum|\n|---------:|--------:|\n| -2.290278| 678.4169|\n\n</div>\n:::\n:::\n\n\nRides with negative duration should not occur, so this needs to be checked and corrected.\n\n##### Addressing negative ride durations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_rides %>%\n  group_by(\n    month = floor_date(as.Date(started_at), \"month\")\n  ) %>%\n  summarise(\n    nrt = mean(ride_time < 0) * 100\n  ) %>%\n  ggplot(aes(month, nrt)) +\n  geom_col() +\n  theme_minimal() +\n  labs(\n    title = \"Rides with negative duration\",\n    x = \"Month\",\n    y = \"Percentage of Rides\"\n  )\n```\n\n::: {.cell-output-display}\n![](cyclistic_files/figure-html/unnamed-chunk-25-1.svg){width=672}\n:::\n:::\n\n\nThe plot indicates that the precentage rides with negative ride durations is around three times higher in November than the next highest month - September.\n\n\n::: {#tbl-days-neg-rides .cell tbl-cap='Days in November 2021 with negative ride time'}\n\n```{.r .cell-code}\nbike_rides %>%\n  filter(month(started_at) == 11) %>%\n  group_by(\"Day\" = day(started_at)) %>%\n  summarise(\"Percent Negative\" = mean(ride_time < 0) * 100) %>%\n  filter(`Percent Negative` > 0)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Day| Percent Negative|\n|---:|----------------:|\n|   7|        0.2746114|\n\n</div>\n:::\n:::\n\n\nAll rides with negative duration in November occurred on the 7th.\n\n\n::: {#tbl-hour-neg-rides .cell tbl-cap='Negative ride duration by hour'}\n\n```{.r .cell-code}\nbike_rides %>%\n  filter(\n    month(started_at) == 11,\n    day(started_at) == 7\n  ) %>%\n  group_by(Hour = hour(started_at)) %>%\n  summarise(\n    \"Percent Negative\" = mean(ride_time < 0) * 100,\n    Count = sum(ride_time < 0)\n  ) %>%\n  filter(`Percent Negative` > 0)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Hour| Percent Negative| Count|\n|----:|----------------:|-----:|\n|    1|         10.49505|    53|\n\n</div>\n:::\n:::\n\n\n@tbl-hour-neg-rides shows that all negative ride durations on 7th November were taken between 1.00am and 2.00am.\nThis coincides with the end of daylight savings in Chicago.\nAt 2.00am clocks went back one hour to 1.00am.\n\nRide start and end timestamp values in the dataset do not include timezone information.\nTimestamps between 1.00am and 2.00am could refer to either Central Daylight Time or Central Standard Time meaning there is an ambiguity which is very difficult to resolve.\n\nThe negative duration of rides which start and end between 1.00am and 2.00am can be resolved by adding 60 minutes.\nHowever the ambiguity of the rides which have one end point in this time range remains.\n\nI recommend that timezone be recorded as part of the timestamp in future to avoid these issues.\n\nFor the present analysis I've chosen to correct the negative timestamps between 1.00am and 2.00am and to leave the ambiguous timestamps unaltered.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_rides <- bike_rides %>%\n  mutate(ride_time = if_else(\n    (ride_time < 0) & (date(started_at) == date(\"2021-11-07\")),\n    ride_time + 3600,\n    ride_time\n  ))\n```\n:::\n\n\n##### Other ride duration issues\n\nThe Cyclistic website indicates that rides of less than 60 seconds have been removed from the dataset.\nCyclistic also state that if rides exceed 24 hours the bike is treated as stolen and the user is fined \\$1200.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_pc <- floor(nrow(bike_rides) * 0.0005)\n\ntop01 <- bike_rides %>%\n  slice_max(ride_time, n = r_pc) %>%\n  summarise(\n    n = n(),\n    min = min(ride_time),\n    max = max(ride_time),\n    mean = mean(ride_time)\n  )\n\ntop01\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|    n|   min|     max|     mean|\n|----:|-----:|-------:|--------:|\n| 2972| 38854| 2442301| 80798.06|\n\n</div>\n:::\n:::\n\n\n99.95% of rides are less than 6 hours.\n\nOver the 12 month period 2972 rides exceeded 10 duration.\n\nTo avoid skewing the analysis I chose to exclude rides over 6 hours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_rides <- bike_rides %>%\n  filter(ride_time >= 90, ride_time < top01$min)\n\nbike_rides %>%\n  group_by(member_casual, rideable_type) %>%\n  summarise(\n    daily_med = as.numeric(median(ride_time)) / 60\n  ) %>%\n  ggplot(\n    aes(\n      rideable_type, daily_med,\n      group = rideable_type,\n      fill = rideable_type\n    )\n  ) +\n  geom_col() +\n  facet_grid(cols = vars(member_casual))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'member_casual'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output-display}\n![](cyclistic_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}