{
  "hash": "e535c4de4dd66f5eb5343abfef3f2d93",
  "result": {
    "markdown": "---\ntitle: \"Cyclistic Customer Analysis\"\nsubtitle: \"Google Data Analytics Certificate Capstone\"\ndate: today\nimage: images/josh-mccausland-8TfeD3J4VtQ-unsplash.jpg\nformat:\n  html:\n    highlight-style: breezedark\n---\n\n\n## Introduction\n\n  This analysis examines the question:\n\n  > How do annual members and casual riders use Cyclistic bikes differently?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable_charge <- function(rate, free_min, duration) {\n  rate * (as.numeric(duration) / 60 - free_min)\n}\n```\n:::\n\n\ncasual - single trip\n$3.30 + 30 minutes then $0.15 pm\ny = 3.3 + 0.15 * clamp(t - 30, lower = 0)\n\ncasual - day pass\n$15.00 + unlimited 3hrs then $0.16\ny = 15 + 0.16 * clamp(t - 180, lower = 0)\n\ncasual - electric\n$1.00 + 0.39 pm\ny = 1 + 0.39 * t\n\nmember - electric\n$10 month, $0 + 0.16 pm\ny = 0.16 * t\n\nmember - classic (unlimited 45 min)\n$10 month, $0 + 45min + 0.16 pm\ny = 10/n + 0.16 * clamp(t - 45, lower = 0)\n\n## Data sources\nThree primary data sources were used for the analysis:\n\n- Divvy Bikes ride data\n\n  Monthly data files from September 2021 to August 2022.\n  Additional data description and download link can be found on the [system data](https://ride.divvybikes.com/system-data) page.\n\n- Divvy Bikes website\n\n  Details of time limits and charges for current [casual and membership plans](https://ride.divvybikes.com/pricing).\n\n- Divvy Bikes active stations\n\nhttps://data.cityofchicago.org/Transportation/Divvy-Bicycle-Stations/bbyy-e7gq\n\n- NOAA Daily weather records\n\n  Weather data covering September 2021 to August 2022.\n\n  O'Hare International Airport weather station was selected as representative of the Chicago region.\n\n## Data cleaning and preparation\n### Initial import\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(glue)\nlibrary(archive)\n```\n:::\n\nThe Divvy trip data files have a consistent naming format prefixed with numeric year and month.\nA list of data file names is generated for months in the range `start_date` to `end_date`.\n\n\n::: {.cell filename='01_import_clean.R'}\n\n```{.r .cell-code  caption=\"Building file list\"}\nstart_date <- \"2021-09\"\nend_date <- \"2022-08\"\n\ndivvy_files <- seq(\n  ym(start_date),\n  ym(end_date),\n  by = \"months\"\n) %>%\n  enframe(\n    value = \"timestamp\"\n  ) %>%\n  glue_data(\n    \"{year(timestamp)}\",\n    \"{stringi::stri_sprintf('%02d', month(timestamp))}\",\n    \"-divvy-tripdata.zip\"\n  )\n```\n:::\n\n\nAll original zip files are downloaded to the `divy_data/raw` folder to ensure there is an unmodified copy of the data. Any files that are already present are not download again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndivvy_downloaded <- glue(\"divy_data/raw/{divvy_files}\")\nto_dl <- divvy_files[!file.exists(divvy_downloaded)]\n```\n:::\n\n\nRequired data files that are missing from the raw data folder are downloaded.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (length(to_dl) > 0) {\n  download.file(\n    glue(\"https://divvy-tripdata.s3.amazonaws.com/{to_dl}\"),\n    glue(\"data/raw/{to_dl}\")\n  )\n}\n```\n:::\n\nNote that the preceding section will not execute correctly in a Quarto document.\nA script for the full import process is provided in the supporting material.\n\nTo check the downloaded file data, 1000 rows are read from the oldest file and column specification inspected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_inspect <- map_dfr(\n  divvy_downloaded[1],\n  ~ archive_read(.) %>%\n    read_csv(\n      n_max = 1000,\n      show_col_types = FALSE\n    )\n)\nspec(bike_inspect)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  ride_id = col_character(),\n  rideable_type = col_character(),\n  started_at = col_datetime(format = \"\"),\n  ended_at = col_datetime(format = \"\"),\n  start_station_name = col_character(),\n  start_station_id = col_character(),\n  end_station_name = col_character(),\n  end_station_id = col_character(),\n  start_lat = col_double(),\n  start_lng = col_double(),\n  end_lat = col_double(),\n  end_lng = col_double(),\n  member_casual = col_character()\n)\n```\n:::\n:::\n\n\nThe first row from all data files is read to check for consistent naming and columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_headers <- map_dfr(\n  divvy_downloaded,\n  ~ archive_read(.) %>%\n    read_csv(\n      id = \"filename\",\n      n_max = 1,\n      col_names = FALSE,\n      show_col_types = FALSE\n    )\n)\nknitr::kable(bike_headers)\n```\n\n::: {.cell-output-display}\n|filename                                                 |X1      |X2            |X3         |X4       |X5                 |X6               |X7               |X8             |X9        |X10       |X11     |X12     |X13           |\n|:--------------------------------------------------------|:-------|:-------------|:----------|:--------|:------------------|:----------------|:----------------|:--------------|:---------|:---------|:-------|:-------|:-------------|\n|archive_read(divy_data/raw/202109-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202110-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202111-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202112-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202201-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202202-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202203-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202204-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202205-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202206-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202207-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202208-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n:::\n:::\n\n\nAfter checking the detected formats, and ensuring the column naming is consistent across all files, data is read from the zip files using a defined column specification. Data not matching the defined format will raise a warning from the import process.\n\nThe date columns are set to import as strings as `readr::col_datetime` does not provide a way to specify timezone.\n\n\n::: {.cell hash='cyclistic_cache/html/unnamed-chunk-7_7483c979331fdd31202c1f5af1460b52'}\n\n```{.r .cell-code}\nbike_rides <- map_dfr(\n  divvy_downloaded,\n  ~ archive_read(.) %>%\n    read_csv(\n      col_types = cols(\n        ride_id = col_character(),\n        rideable_type = col_factor(levels = c(\n          \"classic_bike\",\n          \"docked_bike\",\n          \"electric_bike\"\n        )),\n        started_at = col_datetime(),\n        ended_at = col_datetime(),\n        start_station_name = col_character(),\n        start_station_id = col_character(),\n        end_station_name = col_character(),\n        end_station_id = col_character(),\n        start_lat = col_double(),\n        start_lng = col_double(),\n        end_lat = col_double(),\n        end_lng = col_double(),\n        member_casual = col_factor(levels = c(\n          \"member\",\n          \"casual\"\n        ))\n      ),\n      locale = locale(tz = \"America/Chicago\")\n    )\n)\nknitr::kable(slice_sample(bike_rides, n = 10))\n```\n\n::: {.cell-output-display}\n|ride_id          |rideable_type |started_at          |ended_at            |start_station_name         |start_station_id |end_station_name                      |end_station_id | start_lat| start_lng|  end_lat|   end_lng|member_casual |\n|:----------------|:-------------|:-------------------|:-------------------|:--------------------------|:----------------|:-------------------------------------|:--------------|---------:|---------:|--------:|---------:|:-------------|\n|2375ADB74CCB7C4D |classic_bike  |2022-02-12 15:59:04 |2022-02-12 16:01:39 |Damen Ave & Pierce Ave     |TA1305000041     |Damen Ave & Pierce Ave                |TA1305000041   |  41.90940| -87.67769| 41.90940| -87.67769|member        |\n|E0605D3902A16F41 |classic_bike  |2022-08-17 16:31:37 |2022-08-17 17:03:16 |Streeter Dr & Grand Ave    |13022            |DuSable Lake Shore Dr & Diversey Pkwy |TA1309000039   |  41.89228| -87.61204| 41.93259| -87.63643|member        |\n|762886DE9838834C |electric_bike |2021-09-16 18:48:52 |2021-09-16 19:03:27 |Clarendon Ave & Junior Ter |13389            |Clark St & Bryn Mawr Ave              |KA1504000151   |  41.96099| -87.64949| 41.98353| -87.66897|casual        |\n|4A2AD66C38F0084C |electric_bike |2021-10-20 10:41:13 |2021-10-20 12:54:17 |Wells St & Hubbard St      |TA1307000151     |Wells St & Huron St                   |TA1306000012   |  41.89008| -87.63429| 41.89465| -87.63435|member        |\n|AD9F8BF6098F4644 |classic_bike  |2021-11-26 15:13:01 |2021-11-26 15:16:12 |Streeter Dr & Grand Ave    |13022            |Streeter Dr & Grand Ave               |13022          |  41.89228| -87.61204| 41.89228| -87.61204|casual        |\n|3B1B7A2FFD779F55 |electric_bike |2022-01-06 19:35:47 |2022-01-06 20:00:12 |Leavitt St & Armitage Ave  |TA1309000029     |Leavitt St & Belmont Ave              |KA17018068     |  41.91783| -87.68246| 41.93935| -87.68328|casual        |\n|1388163B867839B4 |electric_bike |2022-03-08 18:11:46 |2022-03-08 18:31:48 |Clark St & Bryn Mawr Ave   |KA1504000151     |Wilton Ave & Belmont Ave              |TA1307000134   |  41.98357| -87.66922| 41.94018| -87.65304|member        |\n|7B2F2AE67D0BB49B |classic_bike  |2021-09-09 20:23:26 |2021-09-09 20:38:56 |Wells St & Elm St          |KA1504000135     |New St & Illinois St                  |TA1306000013   |  41.90322| -87.63432| 41.89085| -87.61862|member        |\n|35A5359600824CDA |electric_bike |2021-11-17 08:10:15 |2021-11-17 08:16:49 |NA                         |NA               |Clark St & Lincoln Ave                |13179          |  41.93000| -87.64000| 41.91586| -87.63470|member        |\n|30B0694376059479 |classic_bike  |2022-06-13 14:22:54 |2022-06-13 14:33:53 |Wells St & Huron St        |TA1306000012     |Clinton St & Lake St                  |13021          |  41.89472| -87.63436| 41.88564| -87.64182|member        |\n:::\n:::\n\n\nThe sample of data shows that some station names and station id's are missing.\nThe missing stations do have latitude and longitude values, however on closer inspection the values appear to these have been rounded to two decimal places.\n\nThis suggests that part of the data set may have been anonymised or obfuscated deliberately.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}