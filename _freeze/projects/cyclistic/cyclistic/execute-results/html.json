{
  "hash": "04e0ff34f91bdb8e547da3d8c9e151c4",
  "result": {
    "markdown": "---\ntitle: \"Cyclistic Customer Analysis\"\nsubtitle: \"Google Data Analytics Certificate Capstone\"\ndate: today\nimage: images/josh-mccausland-8TfeD3J4VtQ-unsplash.jpg\ntitle-block-banner: true\nformat:\n  html:\n    highlight-style: breezedark\n    df-print: kable\n    code-fold: true\nabstract-title: \"Summary\"\nabstract: \"An analysis of historical Divvy Bikes ride data to identify differences in user cohort behaviour.\"\nparams:\n  start_date: \"September 2021\"\n  end_date: \"August 2022\"\neditor:\n  markdown:\n    wrap: sentence\n---\n\n\n# Background\n\nIn 2016 Cyclistic launched a bike-sharing sharing offering which has grown to a fleet of 6000 geotracked bicycles and network of more than 1000 stations across Chicago.\n\nAnalysis by Cyclistic's finance team has determined that riders who purchase annual memberships are more profitable than casual riders.\n\nHead of marketing, Lily Moreno, has set a goal of designing marketing strategies aimed at converting casual riders to members.\nThe intial step is to better understand how casual users and members differ.\nThis information will provide a basis for members of the marketing analytics team to investigate why casual riders might purchase a membership, and how digital media could influence marketing strategy.\n\nThe executive team, which is detail oriented, will decide whether the proposed marketing strategies are approved.\n\n# Defining the business task\n\nThe scope of this analysis is limited to the first step, and investigates the question:\n\n> How do annual members and casual riders use Cyclistic bikes differently?\n\nUnpacking this question highlights a number of areas that may provide useful insights.\n\n#### What defines a member and a casual rider?\n\nThe Divvy Bikes pricing information indicates members pay an upfront annual fee to access pricing that includes \"no-charge\" ride time and lower per minute charges.\nCasual riders access ride sharing on an ad-hoc basis, paying a per-ride charge, and higher per minute charge which begins when the bike is undocked.\nDaily pass riders pay a day access fee to access unlimited 3 hour rides for the duration of the pass.\n\n#### What influence do the plans have on the user behaviour?\nCan we distinguish plan types by the average duration of rides?\nWhat percentage of riders exceed the included 45 minutes ride time of membership plans?\nIs this same for members and casuals?\n\nThis may help identify if time inclusions are a factor for casual riders considering membership.\n\n#### When do different user cohorts ride?\nWhich days, and times are popular for the different cohorts?\nAnd are there identifiable differences or commonality in behaviours?\n\n#### Does weather influence rider behaviour?\nAre the types and number of rides related to day-to-day variations in weather or broader seasonal patterns?\nAre casual users \"all season\" or \"fair weather\" riders?\nCasual riders who ride around the year could be a group that would find membership attractive.\n\n#### Where do different user cohorts ride?\n\nRiders commuting to work are likely to use docking stations in business districts during the week.\nRecreational riders may prefer parks and areas along the shoreline or cafe precincts.\nDocking stations with high levels of usage on different days of the week should provide insight into where user hotspots are located.\n\n# Data sources\n\n### Divvy Bikes system data and pricing\n\nThe base data for individual rides was extracted from Divvy Bike data files covering the period 1 September 2021 to 31 August 2022.\nAdditional data description and a download link is provided on the Divvy Bikes [system data](https://ride.divvybikes.com/system-data) page.\n\nThe [license](https://ride.divvybikes.com/data-license-agreement) allows inclusion of data within analyses and studies published for non-commercial.\nThis clause covers the intended use.\n\nDetails of current [pricing](https://ride.divvybikes.com/pricing) for Divvy Bikes offerings was accessed on 25 September 2022.\n\n### NOAA Climate Data\n\nWeather data covering September 2021 to August 2022 ordered from [NOOA National Centers for Environmental Information](https://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:USW00094846/detail)\n\nO'Hare International Airport weather station was selected as representative of the Chicago region.\n\n### Divvy Bikes historical station status\n\nHistorical station status identifies which stations actively used between September 2021 and August 2022.\nThis information is used to assist identifying Divvy operational rides in the data set.\n\n[City of Chicago open data listing of Divvy Stations](https://data.cityofchicago.org/Transportation/Divvy-Bicycle-Stations/bbyy-e7gq)\n\n# Data cleaning and preparation\n\n### Initial import\n\n\n::: {.cell}\n\n:::\n\n\nThe Divvy trip data files have a consistent naming format `YYYYMM-divvy-tripdata.zip`.\nThis allows file names to be generated for months in the range September 2021 to August 2022.\n\n\n::: {.cell}\n\n```{.r .cell-code  caption=\"Building file list\"}\ndivvy_files <- seq(\n  my(params$start_date),\n  my(params$end_date),\n  by = \"months\"\n) %>%\n  enframe(\n    value = \"timestamp\"\n  ) %>%\n  glue_data(\n    \"{year(timestamp)}\",\n    \"{stringi::stri_sprintf('%02d', month(timestamp))}\",\n    \"-divvy-tripdata.zip\"\n  )\n```\n:::\n\n\nTo preserve a local copy of the original data, zip files are downloaded to the `data/raw` folder.\nThe folder is checked each time the script is run, and files which are already present are removed from the download list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndivvy_downloaded <- glue(\"data/raw/{divvy_files}\")\nto_dl <- divvy_files[!file.exists(divvy_downloaded)]\n```\n:::\n\n\nAny files which are not present in the `data/raw`folder are downloaded.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note that the preceding section will not execute\n# correctly in a Quarto document.\n# A script for the full import process can be found in the\n# Github repository.\n\nif (length(to_dl) > 0) {\n  download.file(\n    glue(\"https://divvy-tripdata.s3.amazonaws.com/{to_dl}\"),\n    glue(\"data/raw/{to_dl}\")\n  )\n}\n```\n:::\n\n\nThe first 1000 rows are read from September 2021 zip file.\n`read_csv` uses the first 1000 rows to determine the type of data in each column.\n\nThe \"guessed\" column type specification can inspected using the `spec` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_inspect <- map_dfr(\n  divvy_downloaded[1],\n  ~ archive_read(.) %>%\n    read_csv(\n      n_max = 1000,\n      show_col_types = FALSE\n    )\n)\nspec(bike_inspect)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  ride_id = col_character(),\n  rideable_type = col_character(),\n  started_at = col_datetime(format = \"\"),\n  ended_at = col_datetime(format = \"\"),\n  start_station_name = col_character(),\n  start_station_id = col_character(),\n  end_station_name = col_character(),\n  end_station_id = col_character(),\n  start_lat = col_double(),\n  start_lng = col_double(),\n  end_lat = col_double(),\n  end_lng = col_double(),\n  member_casual = col_character()\n)\n```\n:::\n:::\n\nThe types defined in the column specification appear to be reasonable choices based on naming of the columns.\n\nTo verify column naming is consistent across all files, the header row from each file is read. The resulting data frame is processed using  `distinct()` to eliminate duplicated rows.  If all headers are identical the resulting data frame will have a single row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_headers <- map_dfr(\n  divvy_downloaded,\n  ~ archive_read(.) %>%\n    read_csv(\n      n_max = 1,\n      col_names = FALSE,\n      show_col_types = FALSE\n    )\n) %>%\n  distinct()\n\nstr(bike_headers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [1 Ã— 13] (S3: tbl_df/tbl/data.frame)\n $ X1 : chr \"ride_id\"\n $ X2 : chr \"rideable_type\"\n $ X3 : chr \"started_at\"\n $ X4 : chr \"ended_at\"\n $ X5 : chr \"start_station_name\"\n $ X6 : chr \"start_station_id\"\n $ X7 : chr \"end_station_name\"\n $ X8 : chr \"end_station_id\"\n $ X9 : chr \"start_lat\"\n $ X10: chr \"start_lng\"\n $ X11: chr \"end_lat\"\n $ X12: chr \"end_lng\"\n $ X13: chr \"member_casual\"\n```\n:::\n:::\n\n\nAfter verifying the detected formats, and checking column naming is consistent across all files, the full dataset can be imported.\nPassing the full column specification to `read_csv()` ensure that data which does not match the expected type is flagged as a problem.\nIssues that arise while importing data can be examined using the `problems()` function.\n\n\n::: {.cell hash='cyclistic_cache/html/unnamed-chunk-6_7ebde1549cd4a8c9008f65ee103ce821'}\n\n```{.r .cell-code}\nbike_rides <- map_dfr(\n  divvy_downloaded,\n  ~ archive_read(.) %>%\n    read_csv(\n      col_types = cols(\n        ride_id = col_character(),\n        rideable_type = col_factor(levels = c(\n          \"classic_bike\",\n          \"docked_bike\",\n          \"electric_bike\"\n        )),\n        started_at = col_datetime(),\n        ended_at = col_datetime(),\n        start_station_name = col_character(),\n        start_station_id = col_character(),\n        end_station_name = col_character(),\n        end_station_id = col_character(),\n        start_lat = col_double(),\n        start_lng = col_double(),\n        end_lat = col_double(),\n        end_lng = col_double(),\n        member_casual = col_factor(levels = c(\n          \"member\",\n          \"casual\"\n        ))\n      ),\n      locale = locale(tz = \"America/Chicago\")\n    )\n)\n```\n:::\n\n\n### Data inspection\nWith the data loaded from file, the data structure can checked with `glimpse()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_rides %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,883,043\nColumns: 13\n$ ride_id            <chr> \"9DC7B962304CBFD8\", \"F930E2C6872D6B32\", \"6EF7213790â€¦\n$ rideable_type      <fct> electric_bike, electric_bike, electric_bike, electrâ€¦\n$ started_at         <dttm> 2021-09-28 16:07:10, 2021-09-28 14:24:51, 2021-09-â€¦\n$ ended_at           <dttm> 2021-09-28 16:09:54, 2021-09-28 14:40:05, 2021-09-â€¦\n$ start_station_name <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Clark St &â€¦\n$ start_station_id   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"TA13070001â€¦\n$ end_station_name   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,â€¦\n$ end_station_id     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,â€¦\n$ start_lat          <dbl> 41.89000, 41.94000, 41.81000, 41.80000, 41.88000, 4â€¦\n$ start_lng          <dbl> -87.68000, -87.64000, -87.72000, -87.72000, -87.740â€¦\n$ end_lat            <dbl> 41.89, 41.98, 41.80, 41.81, 41.88, 41.88, 41.74, 41â€¦\n$ end_lng            <dbl> -87.67, -87.67, -87.72, -87.72, -87.71, -87.74, -87â€¦\n$ member_casual      <fct> casual, casual, casual, casual, casual, casual, casâ€¦\n```\n:::\n:::\n\nThe output indicates that the data set has 5883043 rows, and 13 columns. The `start_station_name`, `start_stattion_id`, `end_station_name` and `end_station_id` columns appear to have a number of missing --`NA`-- values.\n\nThe extent of the missing information can be assessed by counting the number of `NA` values in each column.\n\n\n::: {#tbl-missing-values .cell tbl-cap='Missing Values'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(across(\n    everything(),\n    ~ sum(is.na(.x))\n  )) %>%\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Missing Count\"\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Column             | Missing Count|\n|:------------------|-------------:|\n|ride_id            |             0|\n|rideable_type      |             0|\n|started_at         |             0|\n|ended_at           |             0|\n|start_station_name |        884365|\n|start_station_id   |        884363|\n|end_station_name   |        946303|\n|end_station_id     |        946303|\n|start_lat          |             0|\n|start_lng          |             0|\n|end_lat            |          5727|\n|end_lng            |          5727|\n|member_casual      |             0|\n\n</div>\n:::\n:::\n\n@tbl-missing-values indicates a significant number of records are missing end and start station name and id.  End station location information is also missing small number of records.\nAll other columns have complete data.\n\n\n\n::: {#tbl-missing-by-station .cell tbl-cap='Missing Values by station type'}\n\n```{.r .cell-code}\nbike_rides %>%\n  mutate(\n    missing_start = is.na(start_station_name),\n    missing_end = is.na(end_station_name)\n  ) %>%\n  summarise(\n    \"Start Only\" = sum(missing_start & !missing_end),\n    \"End Only\" = sum(missing_end & !missing_start),\n    Both = sum(missing_start & missing_end),\n    \"Rides effected\" = sum(missing_start | missing_end)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Start Only| End Only|   Both| Rides effected|\n|----------:|--------:|------:|--------------:|\n|     376594|   438532| 507771|        1322897|\n\n</div>\n:::\n:::\n\n\n@tbl-missing-by-station indicates that 22.49% of all rides are missing data for at least one docking station.\nThis represents significant number of data points, and should be checked to determine whether this is an error or there has been systematic changes made.\n\n\n::: {#tbl-coord-range .cell tbl-cap='Latitude and Longitude ranges'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(\n    start_lat = range(start_lat, na.rm = TRUE),\n    start_lng = range(start_lng, na.rm = TRUE),\n    end_lat = range(end_lat, na.rm = TRUE),\n    end_lng = range(end_lng, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| start_lat| start_lng| end_lat| end_lng|\n|---------:|---------:|-------:|-------:|\n|  41.64000| -87.84000|   41.39|  -88.97|\n|  45.63503| -73.79648|   42.37|  -87.50|\n\n</div>\n:::\n:::\n\n\nThe maximum start longitude and latitude values listed in @tbl-coord-range are significantly different to the remaining values.\nThis suggests some rides may have originated outside the Chicago metropolitan area serviced by Cyclistic.\n\nIt appears that some latitude and longitude values may have been rounded to two significant digits. Comparing the value to itself rounded to 2 decimal places identifies potentially truncated values.\nClamping the coordinates in this way means actual locations can be anywhere within 1 square kilometre area centred on the given grid location.\n\n\n\n::: {#tbl-clipped-start .cell tbl-cap='Clipped coordinates and missing start station name'}\n\n```{.r .cell-code}\nbike_rides %>%\n  group_by(Missing = is.na(start_station_id)) %>%\n  summarise(\n    Latitude = sum(start_lat == round(start_lat, 2), na.rm = TRUE),\n    Longitude = sum(start_lng == round(start_lng, 2), na.rm = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Missing | Latitude| Longitude|\n|:-------|--------:|---------:|\n|FALSE   |    78535|     78530|\n|TRUE    |   884363|    884363|\n\n</div>\n:::\n:::\n\nComparing @tbl-missing-values with @tbl-clipped-start indicates the count of start stations with missing names is the same as those which have rounded coordinates.\n\n\n::: {#tbl-clipped-end .cell tbl-cap='Clipped coordinates and missing end station name'}\n\n```{.r .cell-code}\nbike_rides %>%\n  group_by(Missing = is.na(end_station_id)) %>%\n  summarise(\n    Latitude = sum(end_lat == round(end_lat, 2), na.rm = TRUE),\n    Longitude = sum(end_lng == round(end_lng, 2), na.rm = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Missing | Latitude| Longitude|\n|:-------|--------:|---------:|\n|FALSE   |    71004|     71002|\n|TRUE    |   940576|    940576|\n\n</div>\n:::\n:::\n\n\nComparing @tbl-missing-values with @tbl-clipped-end indicates the combined count of end stations with missing latitude and longitude and those with rounded coordinates matches the count of missing end station names.\n\nThis suggests that there is a systemic reason for the missing data, rather than error. It seems likely the location data has been anonymised to protect riders privacy. This needs to be verified with Cyclistics data collection team.\n\nThe ride duration and other information appear plausible and the lack of location data does not impact analysis of this data. Records with missing location information will be retained but filtered for any analysis which depends on accurate location.\n\nWhile the majority of rounded coordinates occur where station names are missing approximately 8% are for stations which are named. These need to be checked during cleaning.\n\n\n::: {#tbl-date-ranges .cell tbl-cap='Ride start and end date ranges'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(\n    start_range = range(started_at),\n    end_range = range(ended_at)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|start_range         |end_range           |\n|:-------------------|:-------------------|\n|2021-09-01 00:00:06 |2021-09-01 00:00:41 |\n|2022-08-31 23:59:39 |2022-09-06 21:49:04 |\n\n</div>\n:::\n:::\n\n\n@tbl-date-ranges indicates the dataset includes rides which finished after August 2022.\n\n\n::: {.cell}\n\n:::\n\n\nIn total 6431 rides are active at midnight on 31 August 2022.\nOf these, 48 rides are still active at 9.00am on 1 September 2022.\nAs these overnight rides are excluded from the start of the data set, I've opted to retain rides which completed prior to 9.00am to ensure this group of riders is not under represented.\n\n### Data Cleaning\n\nThe end stations with missing name and coordinates are addressed first.\n\n::: {#tbl-no-end-coords .cell tbl-cap='Missing end station coordinates'}\n\n```{.r .cell-code}\nno_end_coords <- bike_rides %>%\n  filter(is.na(end_lat), is.na(end_lng)) %>%\n  select(-starts_with(\"start_\"))\n\nhead(no_end_coords)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|ride_id          |rideable_type |started_at          |ended_at            |end_station_name |end_station_id | end_lat| end_lng|member_casual |\n|:----------------|:-------------|:-------------------|:-------------------|:----------------|:--------------|-------:|-------:|:-------------|\n|73445D403239209F |classic_bike  |2021-09-21 15:09:23 |2021-09-21 16:40:03 |NA               |NA             |      NA|      NA|casual        |\n|A2469E52D1096024 |classic_bike  |2021-09-26 08:32:12 |2021-09-26 11:50:59 |NA               |NA             |      NA|      NA|casual        |\n|CEEB7DD4A1D551E6 |classic_bike  |2021-09-04 13:52:02 |2021-09-04 17:21:15 |NA               |NA             |      NA|      NA|casual        |\n|777362A22D3FAA63 |classic_bike  |2021-09-22 10:01:36 |2021-09-23 11:01:27 |NA               |NA             |      NA|      NA|casual        |\n|2F577C3B80FCE4B7 |classic_bike  |2021-09-10 22:48:46 |2021-09-11 23:48:39 |NA               |NA             |      NA|      NA|casual        |\n|63BDD448BE00415C |classic_bike  |2021-09-15 01:53:24 |2021-09-16 02:53:18 |NA               |NA             |      NA|      NA|casual        |\n\n</div>\n:::\n:::\n\nThe preview of these rides contains several rides which extend for more than a day.  Cyclistic treat bikes unlocked for more than 24 hours as stolen, so these are likely be bikes that have not been physically docked at the ride termination time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_end_coords %>%\n  group_by(member_casual) %>%\n  summarise(triptime = as.numeric(started_at %--% ended_at, units = \"days\")) %>%\n  ggplot(aes(triptime, fill = member_casual)) +\n  geom_histogram(binwidth = 1) +\n  guides(fill = \"none\") +\n  facet_grid(rows = vars(member_casual)) +\n  labs(\n    title = \"Rides with missing end coordinate by cohort\",\n    x = \"Trip Duration in Days\",\n    y = \"Rides\"\n  ) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](cyclistic_files/figure-html/unnamed-chunk-16-1.svg){width=672}\n:::\n:::\n\n\nThe graph shows that around 5000 of the 5727 rides terminated after more than 24 hours. Notably casual rides are the biggest contributor.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}