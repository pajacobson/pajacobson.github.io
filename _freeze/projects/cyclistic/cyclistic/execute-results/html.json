{
  "hash": "5575ce5ec1bb469d6c4a2e86de09057d",
  "result": {
    "markdown": "---\ntitle: \"Cyclistic Customer Analysis\"\nsubtitle: \"Google Data Analytics Certificate Capstone\"\ndate: today\nimage: images/josh-mccausland-8TfeD3J4VtQ-unsplash.jpg\nformat:\n  html:\n    highlight-style: breezedark\n---\n\n\n## Introduction\n\n  This analysis examines the question:\n\n  > How do annual members and casual riders use Cyclistic bikes differently?\n\n\n## Data sources\nThree primary data sources were used for the analysis:\n\n- Divvy Bikes ride data\n\n  Monthly data files from September 2021 to August 2022.\n  Additional data description and download link can be found on the [system data](https://ride.divvybikes.com/system-data) page.\n\n- Divvy Bikes website\n\n  Details of time limits and charges for current [casual and membership plans](https://ride.divvybikes.com/pricing).\n\n- Divvy Bikes active stations\n\nhttps://data.cityofchicago.org/Transportation/Divvy-Bicycle-Stations/bbyy-e7gq\n\n- NOAA Daily weather records\n\n  Weather data covering September 2021 to August 2022.\n\n  O'Hare International Airport weather station was selected as representative of the Chicago region.\n\n## Data cleaning and preparation\n### Initial import\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(glue)\nlibrary(archive)\n```\n:::\n\nThe Divvy trip data files have a consistent naming format prefixed with numeric year and month.\nA list of data file names is generated for months in the range `start_date` to `end_date`.\n\n\n::: {.cell filename='01_import_clean.R'}\n\n```{.r .cell-code  caption=\"Building file list\"}\nstart_date <- \"2021-09\"\nend_date <- \"2022-08\"\n\ndivvy_files <- seq(\n  ym(start_date),\n  ym(end_date),\n  by = \"months\"\n) %>%\n  enframe(\n    value = \"timestamp\"\n  ) %>%\n  glue_data(\n    \"{year(timestamp)}\",\n    \"{stringi::stri_sprintf('%02d', month(timestamp))}\",\n    \"-divvy-tripdata.zip\"\n  )\n```\n:::\n\n\nAll original zip files are downloaded to the `divy_data/raw` folder to ensure there is an unmodified copy of the data. Any files that are already present are not download again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndivvy_downloaded <- glue(\"divy_data/raw/{divvy_files}\")\nto_dl <- divvy_files[!file.exists(divvy_downloaded)]\n```\n:::\n\n\nRequired data files that are missing from the raw data folder are downloaded.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (length(to_dl) > 0) {\n  download.file(\n    glue(\"https://divvy-tripdata.s3.amazonaws.com/{to_dl}\"),\n    glue(\"data/raw/{to_dl}\")\n  )\n}\n```\n:::\n\nNote that the preceding section will not execute correctly in a Quarto document.\nA script for the full import process is provided in the supporting material.\n\nTo check the downloaded file data, 1000 rows are read from the oldest file and column specification inspected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_inspect <- map_dfr(\n  divvy_downloaded[1],\n  ~ archive_read(.) %>%\n    read_csv(\n      n_max = 1000,\n      show_col_types = FALSE\n    )\n)\nspec(bike_inspect)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  ride_id = col_character(),\n  rideable_type = col_character(),\n  started_at = col_datetime(format = \"\"),\n  ended_at = col_datetime(format = \"\"),\n  start_station_name = col_character(),\n  start_station_id = col_character(),\n  end_station_name = col_character(),\n  end_station_id = col_character(),\n  start_lat = col_double(),\n  start_lng = col_double(),\n  end_lat = col_double(),\n  end_lng = col_double(),\n  member_casual = col_character()\n)\n```\n:::\n:::\n\n\nThe first row from all data files is read to check for consistent naming and columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_headers <- map_dfr(\n  divvy_downloaded,\n  ~ archive_read(.) %>%\n    read_csv(\n      id = \"filename\",\n      n_max = 1,\n      col_names = FALSE,\n      show_col_types = FALSE\n    )\n)\nknitr::kable(bike_headers)\n```\n\n::: {.cell-output-display}\n|filename                                                 |X1      |X2            |X3         |X4       |X5                 |X6               |X7               |X8             |X9        |X10       |X11     |X12     |X13           |\n|:--------------------------------------------------------|:-------|:-------------|:----------|:--------|:------------------|:----------------|:----------------|:--------------|:---------|:---------|:-------|:-------|:-------------|\n|archive_read(divy_data/raw/202109-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202110-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202111-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202112-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202201-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202202-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202203-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202204-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202205-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202206-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202207-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n|archive_read(divy_data/raw/202208-divvy-tripdata.zip)[1] |ride_id |rideable_type |started_at |ended_at |start_station_name |start_station_id |end_station_name |end_station_id |start_lat |start_lng |end_lat |end_lng |member_casual |\n:::\n:::\n\n\nAfter checking the detected formats, and ensuring the column naming is consistent across all files, data is read from the zip files using a defined column specification. Data not matching the defined format will raise a warning from the import process.\n\nThe date columns are set to import as strings as `readr::col_datetime` does not provide a way to specify timezone.\n\n\n::: {.cell hash='cyclistic_cache/html/unnamed-chunk-6_79667e74751d6618be48a30904ec1d9a'}\n\n```{.r .cell-code}\nbike_rides <- map_dfr(\n  divvy_downloaded,\n  ~ archive_read(.) %>%\n    read_csv(\n      col_types = cols(\n        ride_id = col_character(),\n        rideable_type = col_factor(levels = c(\n          \"classic_bike\",\n          \"docked_bike\",\n          \"electric_bike\"\n        )),\n        started_at = col_datetime(),\n        ended_at = col_datetime(),\n        start_station_name = col_character(),\n        start_station_id = col_character(),\n        end_station_name = col_character(),\n        end_station_id = col_character(),\n        start_lat = col_double(),\n        start_lng = col_double(),\n        end_lat = col_double(),\n        end_lng = col_double(),\n        member_casual = col_factor(levels = c(\n          \"member\",\n          \"casual\"\n        ))\n      ),\n      locale = locale(tz = \"America/Chicago\")\n    )\n)\nknitr::kable(slice_sample(bike_rides, n = 10))\n```\n\n::: {.cell-output-display}\n|ride_id          |rideable_type |started_at          |ended_at            |start_station_name                 |start_station_id |end_station_name                    |end_station_id | start_lat| start_lng|  end_lat|   end_lng|member_casual |\n|:----------------|:-------------|:-------------------|:-------------------|:----------------------------------|:----------------|:-----------------------------------|:--------------|---------:|---------:|--------:|---------:|:-------------|\n|DB0E5F084D47A9A8 |electric_bike |2022-08-19 19:48:09 |2022-08-19 20:03:08 |NA                                 |NA               |NA                                  |NA             |  41.90000| -87.66000| 41.91000| -87.63000|casual        |\n|A023F0B58470C7CB |classic_bike  |2021-09-01 20:58:34 |2021-09-01 22:06:16 |Sheffield Ave & Willow St          |TA1306000032     |Rush St & Cedar St                  |KA1504000133   |  41.91369| -87.65286| 41.90231| -87.62769|member        |\n|3CF8A34FA61D155C |electric_bike |2022-03-14 15:58:36 |2022-03-14 16:09:36 |NA                                 |NA               |NA                                  |NA             |  41.91000| -87.71000| 41.92000| -87.69000|member        |\n|22EFCE15AA2D0936 |classic_bike  |2021-11-05 13:37:43 |2021-11-05 14:59:25 |Central Park Ave & Elbridge Ave    |15644            |Central Park Ave & Elbridge Ave     |15644          |  41.93534| -87.71689| 41.93534| -87.71689|casual        |\n|180D66CA199C70B5 |electric_bike |2021-12-19 22:00:22 |2021-12-19 22:02:46 |Broadway & Sheridan Rd             |13323            |Broadway & Cornelia Ave             |13278          |  41.95282| -87.65007| 41.94553| -87.64644|member        |\n|E7CCC078116174C0 |electric_bike |2022-04-30 13:18:54 |2022-04-30 13:28:49 |Wentworth Ave & Cermak Rd          |13075            |Shields Ave & 28th Pl               |15443          |  41.85309| -87.63190| 41.84273| -87.63549|casual        |\n|FB46C45F8A04A70C |docked_bike   |2022-08-11 10:03:10 |2022-08-11 10:26:27 |DuSable Lake Shore Dr & North Blvd |LF-005           |DuSable Lake Shore Dr & Belmont Ave |TA1309000049   |  41.91172| -87.62680| 41.94078| -87.63919|casual        |\n|0E05D8ED5FEAFB43 |classic_bike  |2022-07-04 11:16:29 |2022-07-04 11:22:04 |Ravenswood Ave & Lawrence Ave      |TA1309000066     |Damen Ave & Sunnyside Ave           |TA1309000012   |  41.96909| -87.67424| 41.96325| -87.67926|casual        |\n|2FBCF1A6CE3755EA |electric_bike |2022-02-18 12:34:00 |2022-02-18 12:41:17 |Rush St & Superior St              |15530            |Sedgwick St & Schiller St           |TA1307000143   |  41.89572| -87.62597| 41.90763| -87.63857|member        |\n|6ED2E0056EAD585B |classic_bike  |2022-01-21 12:27:46 |2022-01-21 12:30:08 |Clinton St & Jackson Blvd          |638              |Jefferson St & Monroe St            |WL-011         |  41.87832| -87.64098| 41.88033| -87.64275|member        |\n:::\n:::\n\n\nThe sample of data shows that some station names and station id's are missing.\nThe missing stations do have latitude and longitude values, however on closer inspection the values appear to these have been rounded to two decimal places.\n\nThis suggests that part of the data set may have been anonymised or obfuscated deliberately.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}