{
  "hash": "d1edb37889d794f0570aa18c200ecccc",
  "result": {
    "markdown": "---\ntitle: \"Cyclistic Data Cleaning\"\nsubtitle: \"Google Data Analytics Certificate Capstone\"\ndate: today\nimage: images/mariusz-pierog-EqPRDrddtaQ-unsplash-thumb.jpg\nformat:\n  html:\n    highlight-style: breezedark\n    df-print: kable\n    code-fold: true\n    fig-responsive: true\nabstract-title: \"Summary\"\nabstract: \"Collecting and cleaning Divvy Bikes ride data.\"\nparams:\n  start_date: \"September 2021\"\n  end_date: \"August 2022\"\n  zip_dir: \"data/raw\"\neditor:\n  markdown:\n    wrap: sentence\n---\n\n\n::: column-body\n\n![Image: [Mariusz Pierog](https://unsplash.com/@mariuszpierog?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)](images/mariusz-pierog-EqPRDrddtaQ-unsplash-banner.jpg)\n:::\n\n## Data sources\n\n### Divvy Bikes system data and pricing\n\nThe base data for individual rides was extracted from Divvy Bike data files covering the period 1 September 2021 to 31 August 2022.\nAdditional data description and a download link is provided on the Divvy Bikes [system data](https://ride.divvybikes.com/system-data) page.\n\nThe [license](https://ride.divvybikes.com/data-license-agreement) allows inclusion of data within analyses and studies published for non-commercial.\nThis clause covers the intended use.\n\nDetails of current [pricing](https://ride.divvybikes.com/pricing) for Divvy Bikes offerings was accessed on 25 September 2022.\n\n### NOAA Climate Data\n\nWeather data covering September 2021 to August 2022 ordered from [NOOA National Centers for Environmental Information](https://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:USW00094846/detail)\n\nO'Hare International Airport weather station was selected as representative of the Chicago region.\n\n### Divvy Bikes historical station status\n\nHistorical station status identifies which stations actively used between September 2021 and August 2022.\nThis information is used to assist identifying Divvy operational rides in the data set.\n\n[City of Chicago open data listing of Divvy Stations](https://data.cityofchicago.org/Transportation/Divvy-Bicycle-Stations/bbyy-e7gq)\n\n## Data cleaning and preparation\n\n### Initial import\n\n\n::: {.cell}\n\n:::\n\n\nThe Divvy trip data files have a consistent naming format `YYYYMM-divvy-tripdata.zip`.\nThis allows file names to be generated for months in the range September 2021 to August 2022.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  caption=\"Building file list\"}\ndivvy_files <- seq(\n  my(params$start_date),\n  my(params$end_date),\n  by = \"months\"\n) %>%\n  enframe(\n    value = \"timestamp\"\n  ) %>%\n  glue_data(\n    \"{year(timestamp)}\",\n    \"{stringi::stri_sprintf('%02d', month(timestamp))}\",\n    \"-divvy-tripdata.zip\"\n  )\n```\n:::\n\n\nTo preserve a local copy of the original data, zip files are downloaded to the `data/raw` folder.\nThe folder is checked each time the script is run, and files which are already present are removed from the download list.\n\nAny files which are not present in the `data/raw`folder are downloaded.\n\n\n::: {.cell}\n\n```{.r .cell-code  caption=\"download zip archives\"}\nfile_list <- glue(\"{params$zip_dir}/{divvy_files}\")\nfiles_to_dl <- divvy_files[!file.exists(file_list)]\n\nif (length(files_to_dl) > 0) {\n  purrr::walk2(\n    glue(\"https://divvy-tripdata.s3.amazonaws.com/{files_to_dl}\"),\n    glue(\"{params$zip_dir}/{files_to_dl}\"),\n    download.file\n  )\n}\n```\n:::\n\n\nThe first 1000 rows are read from September 2021 zip file.\nThis allows `read_csv` to determine the type of data in each column.\nThe \"guessed\" column type specification can then inspected using the `spec` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_inspect <- map_dfr(\n  file_list[1],\n  ~ archive_read(.) %>%\n    read_csv(\n      n_max = 1000,\n      show_col_types = FALSE\n    )\n)\nspec(bike_inspect)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  ride_id = col_character(),\n  rideable_type = col_character(),\n  started_at = col_datetime(format = \"\"),\n  ended_at = col_datetime(format = \"\"),\n  start_station_name = col_character(),\n  start_station_id = col_character(),\n  end_station_name = col_character(),\n  end_station_id = col_character(),\n  start_lat = col_double(),\n  start_lng = col_double(),\n  end_lat = col_double(),\n  end_lng = col_double(),\n  member_casual = col_character()\n)\n```\n:::\n:::\n\n\nThe types defined in the column specification appear to be reasonable choices based on naming of the columns.\n\nTo verify column naming is consistent across all files, the header row from each file is read.\nThe resulting data frame is processed using `distinct()` to eliminate duplicated rows.\nIf all headers are identical the resulting data frame will have a single row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_headers <- map_dfr(\n  file_list,\n  ~ archive_read(.) %>%\n    read_csv(\n      n_max = 1,\n      col_names = FALSE,\n      show_col_types = FALSE\n    )\n) %>%\n  distinct()\n\nglimpse(bike_headers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 13\n$ X1  <chr> \"ride_id\"\n$ X2  <chr> \"rideable_type\"\n$ X3  <chr> \"started_at\"\n$ X4  <chr> \"ended_at\"\n$ X5  <chr> \"start_station_name\"\n$ X6  <chr> \"start_station_id\"\n$ X7  <chr> \"end_station_name\"\n$ X8  <chr> \"end_station_id\"\n$ X9  <chr> \"start_lat\"\n$ X10 <chr> \"start_lng\"\n$ X11 <chr> \"end_lat\"\n$ X12 <chr> \"end_lng\"\n$ X13 <chr> \"member_casual\"\n```\n:::\n:::\n\n\nAfter verifying the detected formats, and checking column naming is consistent across all files, the full dataset can be imported.\nPassing the full column specification to `read_csv()` ensure that data which does not match the expected type is flagged as a problem.\nIssues that arise while importing data can be examined using the `problems()` function.\n\n\n::: {.cell hash='datacleaning_cache/html/lst-import-from-zip_26dfe5e14469c6f8f220310cc240a7a9'}\n\n```{.r .cell-code}\nbike_rides <- map_dfr(\n  file_list,\n  ~ archive_read(.) %>%\n    read_csv(\n      col_types = cols(\n        ride_id = col_character(),\n        rideable_type = col_factor(levels = c(\n          \"classic_bike\",\n          \"docked_bike\",\n          \"electric_bike\"\n        )),\n        started_at = col_datetime(),\n        ended_at = col_datetime(),\n        start_station_name = col_character(),\n        start_station_id = col_character(),\n        end_station_name = col_character(),\n        end_station_id = col_character(),\n        start_lat = col_double(),\n        start_lng = col_double(),\n        end_lat = col_double(),\n        end_lng = col_double(),\n        member_casual = col_factor(levels = c(\n          \"member\",\n          \"casual\"\n        ))\n      ),\n      locale = locale(tz = \"America/Chicago\")\n    )\n)\n```\n:::\n\n\nTo improve readability `rideable_type` is renamed to `bike_type` and the `_bike` suffix removed from the factor levels.\n`member_casual` is renamed to `user_type` and the factor levels given inital caps.\nAn additional column is added which combines the `bike_type` and `user_type` categorical variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_rides <- bike_rides %>%\n  mutate(\n    rideable_type = recode(\n      rideable_type,\n      classic_bike = \"Classic\",\n      docked_bike = \"Docked\",\n      electric_bike = \"Electric\"\n    ),\n    member_casual = recode(\n      member_casual,\n      member = \"Member\",\n      casual = \"Casual\"\n    ),\n    user_bike = forcats::fct_cross(member_casual, rideable_type, sep = \"-\")\n  ) %>%\n  rename(\n    bike_type = rideable_type,\n    user_type = member_casual\n  )\n```\n:::\n\n\n### Data inspection\n\nWith the data loaded from file, the data structure can checked with `glimpse()`.\n\n\n::: {.cell tbl-cap='Structure of imported data' markup='true'}\n\n```{.r .cell-code}\nglimpse(bike_rides)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,883,043\nColumns: 14\n$ ride_id            <chr> \"9DC7B962304CBFD8\", \"F930E2C6872D6B32\", \"6EF7213790…\n$ bike_type          <fct> Electric, Electric, Electric, Electric, Electric, E…\n$ started_at         <dttm> 2021-09-28 16:07:10, 2021-09-28 14:24:51, 2021-09-…\n$ ended_at           <dttm> 2021-09-28 16:09:54, 2021-09-28 14:40:05, 2021-09-…\n$ start_station_name <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Clark St &…\n$ start_station_id   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"TA13070001…\n$ end_station_name   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ end_station_id     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ start_lat          <dbl> 41.89000, 41.94000, 41.81000, 41.80000, 41.88000, 4…\n$ start_lng          <dbl> -87.68000, -87.64000, -87.72000, -87.72000, -87.740…\n$ end_lat            <dbl> 41.89, 41.98, 41.80, 41.81, 41.88, 41.88, 41.74, 41…\n$ end_lng            <dbl> -87.67, -87.67, -87.72, -87.72, -87.71, -87.74, -87…\n$ user_type          <fct> Casual, Casual, Casual, Casual, Casual, Casual, Cas…\n$ user_bike          <fct> Casual-Electric, Casual-Electric, Casual-Electric, …\n```\n:::\n:::\n\n\nThe output indicates that the data set has 5,883,043 rows, and 14 columns.\nThe `start_station_name`, `start_stattion_id`, `end_station_name` and `end_station_id` columns appear to have a number of missing values - identified by `NA`.\n\n\n::: {#tbl-missing-values .cell tbl-cap='Missing Values'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(across(\n    everything(),\n    ~ sum(is.na(.x))\n  )) %>%\n  pivot_longer(\n    cols = everything(),\n    names_to = \"Column\",\n    values_to = \"Missing Count\"\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Column             | Missing Count|\n|:------------------|-------------:|\n|ride_id            |             0|\n|bike_type          |             0|\n|started_at         |             0|\n|ended_at           |             0|\n|start_station_name |        884365|\n|start_station_id   |        884363|\n|end_station_name   |        946303|\n|end_station_id     |        946303|\n|start_lat          |             0|\n|start_lng          |             0|\n|end_lat            |          5727|\n|end_lng            |          5727|\n|user_type          |             0|\n|user_bike          |             0|\n\n</div>\n:::\n:::\n\n\n@tbl-missing-values indicates a significant number of observations are missing end and start station name and id.\nEnd station location information is also missing small number of records.\nAll other columns have complete data.\n\n\n::: {#tbl-missing-by-station .cell tbl-cap='Missing Values by station type'}\n\n```{.r .cell-code}\nbike_rides %>%\n  mutate(\n    missing_start = is.na(start_station_name),\n    missing_end = is.na(end_station_name)\n  ) %>%\n  summarise(\n    \"Start Only\" = sum(missing_start & !missing_end),\n    \"End Only\" = sum(missing_end & !missing_start),\n    Both = sum(missing_start & missing_end),\n    \"Rides effected\" = sum(missing_start | missing_end)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Start Only| End Only|   Both| Rides effected|\n|----------:|--------:|------:|--------------:|\n|     376594|   438532| 507771|        1322897|\n\n</div>\n:::\n:::\n\n\n@tbl-missing-by-station indicates that 22.49% of all rides are missing data for at least one docking station.\nThis should be checked to determine whether this is due to error or a systematic reason.\n\n\n::: {#tbl-coord-range .cell tbl-cap='Latitude and Longitude ranges'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(\n    start_lat = range(start_lat, na.rm = TRUE),\n    start_lng = range(start_lng, na.rm = TRUE),\n    end_lat = range(end_lat, na.rm = TRUE),\n    end_lng = range(end_lng, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| start_lat| start_lng| end_lat| end_lng|\n|---------:|---------:|-------:|-------:|\n|  41.64000| -87.84000|   41.39|  -88.97|\n|  45.63503| -73.79648|   42.37|  -87.50|\n\n</div>\n:::\n:::\n\n\nThe maximum start longitude and latitude values listed in @tbl-coord-range are significantly different to the remaining values.\nThis suggests some rides may have originated outside the Chicago metropolitan area serviced by Cyclistic.\n\nIt appears that some latitude and longitude values may have been rounded to two significant digits.\nComparing the value to itself rounded to 2 decimal places identifies potentially truncated values.\nClamping the coordinates in this way means actual locations can be anywhere within 1 square kilometre area centred on the given grid location.\n\n\n::: {#tbl-clipped-start .cell tbl-cap='Clipped coordinates and missing start station name'}\n\n```{.r .cell-code}\nbike_rides %>%\n  group_by(Missing = is.na(start_station_id)) %>%\n  summarise(\n    Latitude = sum(start_lat == round(start_lat, 2), na.rm = TRUE),\n    Longitude = sum(start_lng == round(start_lng, 2), na.rm = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Missing | Latitude| Longitude|\n|:-------|--------:|---------:|\n|FALSE   |    78535|     78530|\n|TRUE    |   884363|    884363|\n\n</div>\n:::\n:::\n\n\nComparing @tbl-missing-values with @tbl-clipped-start indicates the number of start stations with missing names is the same as those which have rounded coordinates.\n\n\n::: {#tbl-clipped-end .cell tbl-cap='Clipped coordinates and missing end station name'}\n\n```{.r .cell-code}\nbike_rides %>%\n  group_by(Missing = is.na(end_station_id)) %>%\n  summarise(\n    Latitude = sum(end_lat == round(end_lat, 2), na.rm = TRUE),\n    Longitude = sum(end_lng == round(end_lng, 2), na.rm = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Missing | Latitude| Longitude|\n|:-------|--------:|---------:|\n|FALSE   |    71004|     71002|\n|TRUE    |   940576|    940576|\n\n</div>\n:::\n:::\n\n\nComparing @tbl-missing-values with @tbl-clipped-end indicates the combined count of end stations with missing latitude and longitude and those with rounded coordinates matches the count of missing end station names.\n\nThis suggests that there is a systemic reason for the missing data, rather than error.\nIt seems likely the location data has been anonymised to protect riders privacy.\nThis needs to be verified with Cyclistics data collection team.\n\nThe ride duration and other information appear plausible and the lack of location data does not impact analysis of this data.\nRecords with missing location information will be retained but filtered for any analysis which depends on accurate location.\n\nWhile the majority of rounded coordinates occur where station names are missing approximately 8% are for stations which are named.\nThese need to be checked during cleaning.\n\n\n::: {#tbl-date-ranges .cell tbl-cap='Ride start and end date ranges'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(\n    start_range = range(started_at),\n    end_range = range(ended_at)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|start_range         |end_range           |\n|:-------------------|:-------------------|\n|2021-09-01 00:00:06 |2021-09-01 00:00:41 |\n|2022-08-31 23:59:39 |2022-09-06 21:49:04 |\n\n</div>\n:::\n:::\n\n\n@tbl-date-ranges indicates the dataset includes rides which finished after August 2022.\n\n\n::: {.cell}\n\n:::\n\n\nIn total 115 rides are active at midnight on 31 August 2022.\nAs these overnight rides cause issues with data visualisation and other analysis, I chose to remove rides which finished after mid\n\n### Data Cleaning\n\n#### Missing end station coordinates\n\nThe end stations with missing name and coordinates are addressed first.\n\n\n::: {#tbl-no-end-coords .cell tbl-cap='Missing end station coordinates'}\n\n```{.r .cell-code}\nno_end_coords <- bike_rides %>%\n  filter(is.na(end_lat), is.na(end_lng))\n\nno_end_coords %>%\n  select(\n    -ride_id,\n    -starts_with(\"start_\")\n  ) %>%\n  head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|bike_type |started_at          |ended_at            |end_station_name |end_station_id | end_lat| end_lng|user_type |user_bike      |\n|:---------|:-------------------|:-------------------|:----------------|:--------------|-------:|-------:|:---------|:--------------|\n|Classic   |2021-09-21 15:09:23 |2021-09-21 16:40:03 |NA               |NA             |      NA|      NA|Casual    |Casual-Classic |\n|Classic   |2021-09-26 08:32:12 |2021-09-26 11:50:59 |NA               |NA             |      NA|      NA|Casual    |Casual-Classic |\n|Classic   |2021-09-04 13:52:02 |2021-09-04 17:21:15 |NA               |NA             |      NA|      NA|Casual    |Casual-Classic |\n|Classic   |2021-09-22 10:01:36 |2021-09-23 11:01:27 |NA               |NA             |      NA|      NA|Casual    |Casual-Classic |\n|Classic   |2021-09-10 22:48:46 |2021-09-11 23:48:39 |NA               |NA             |      NA|      NA|Casual    |Casual-Classic |\n|Classic   |2021-09-15 01:53:24 |2021-09-16 02:53:18 |NA               |NA             |      NA|      NA|Casual    |Casual-Classic |\n\n</div>\n:::\n:::\n\n\nThe preview of these rides contains several rides which extend for more than a day.\nCyclistic treat bikes unlocked for more than 24 hours as stolen.\nThese rides are likely to be bikes that have been reported stolen and not physically docked at the ride termination time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_e_c <- no_end_coords %>%\n  group_by(user_type) %>%\n  summarise(triptime = as.numeric(started_at %--% ended_at, units = \"days\"), n = n())\n\n\nn_e_c %>%\n  ggplot(aes(triptime, fill = user_type)) +\n  geom_histogram(binwidth = 1) +\n  scale_y_log10() +\n  guides(fill = \"none\") +\n  facet_grid(rows = vars(user_type)) +\n  labs(\n    title = \"Rides with missing end coordinates by user type\",\n    x = \"Trip Duration in Days\",\n    y = \"Rides (log10)\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![Summary of rides with missing end coordinates](datacleaning_files/figure-html/fig-rides-missing-end-coord-1.svg){#fig-rides-missing-end-coord width=672}\n:::\n:::\n\n\n@fig-rides-missing-end-coord shows that the majority of ride with missing end coordinates had a duration of more than 24 hours.\nNotably casual rides are the biggest contributor.\n\n#### Cyclistic operational rides\n\nA list of stations that were *In-Service* between September 2021 and August 2022 was extracted from a dataset maintained by City of Chicago.\nThe dataset for the period of interest contains over 35 million rows recording the status of each docking station at hour intervals.\n\nDue to the size of the dataset the processed listing of stations is used in this analysis.\n\n\n::: {#tbl-stations-in-use .cell tbl-cap='Stations recorded as in-service'}\n\n```{.r .cell-code}\nactive_stations <- read_csv(\n  \"data/processed/stations_in_use.csv\",\n  show_col_types = FALSE\n)\n\nactive_stations %>%\n  slice_sample(n = 6) %>%\n  select(-id)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|timestamp           |station_name                         | latitude| longitude|\n|:-------------------|:------------------------------------|--------:|---------:|\n|2022-02-23 20:05:10 |N Shore Channel Trail & Argyle St    | 41.97233| -87.70430|\n|2021-08-31 05:05:35 |Kilbourn Ave & Irving Park Rd        | 41.95373| -87.74057|\n|2022-07-07 14:15:27 |Public Rack - King Dr & Oakwood Blvd | 41.82283| -87.61649|\n|2021-08-31 05:05:35 |Michigan Ave & 8th St                | 41.87277| -87.62398|\n|2021-08-31 05:05:35 |Wallace St & 35th St                 | 41.83063| -87.64129|\n|2021-11-11 21:35:35 |Western Ave & Grace St               | 41.94876| -87.68847|\n\n</div>\n:::\n:::\n\n\nA random sample of stations from the dataset is shown in @tbl-stations-in-use.\nThe timestamp indicates the first time a station appears as *In-Service* in the original dataset.\n\nThe active stations dataset is used to identify stations that were not listed as publicly available.\n\n\n::: {#tbl-unlisted-stations .cell tbl-cap='Unlisted stations'}\n\n```{.r .cell-code}\nunlisted_start <- bike_rides %>%\n  anti_join(\n    active_stations,\n    by = c(\"start_station_name\" = \"station_name\")\n  ) %>%\n  select(\n    station_name = start_station_name,\n    station_id = start_station_id\n  )\n\nunlisted_end <- bike_rides %>%\n  anti_join(\n    active_stations,\n    by = c(\"end_station_name\" = \"station_name\")\n  ) %>%\n  select(\n    station_name = end_station_name,\n    station_id = end_station_id\n  )\n\nunlisted_stations <- unlisted_start %>%\n  bind_rows(unlisted_end) %>%\n  drop_na(station_name, station_id) %>%\n  group_by(station_name, station_id) %>%\n  summarise(count = n())\n\nunlisted_stations\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|station_name                                 |station_id                                   | count|\n|:--------------------------------------------|:--------------------------------------------|-----:|\n|Base - 2132 W Hubbard                        |Hubbard Bike-checking (LBS-WH-TEST)          |  1182|\n|Base - 2132 W Hubbard Warehouse              |Hubbard Bike-checking (LBS-WH-TEST)          |   963|\n|Bissell St & Armitage Ave - Charging         |Bissell St & Armitage Ave - Charging         |    38|\n|Bissell St & Armitage Ave - Charging         |chargingstx1                                 |     2|\n|DIVVY CASSETTE REPAIR MOBILE STATION         |DIVVY CASSETTE REPAIR MOBILE STATION         |     8|\n|Hastings WH 2                                |Hastings WH 2                                |     5|\n|Lincoln Ave & Roscoe St - Charging           |Lincoln Ave & Roscoe St - Charging           |     6|\n|NewHastings                                  |2059 Hastings Warehouse Station              |    47|\n|Pawel Bialowas - Test- PBSC charging station |Pawel Bialowas - Test- PBSC charging station |     2|\n|Public Rack - Kedzie Ave &amp; 62nd Pl       |1038                                         |     1|\n|Throop/Hastings Mobile Station               |Throop/Hastings Mobile Station               |     3|\n|WEST CHI-WATSON                              |DIVVY 001                                    |    21|\n|WEST CHI-WATSON                              |DIVVY 001 - Warehouse test station           |     4|\n|WestChi                                      |DIVVY 001 - Warehouse test station           |     6|\n|Wilton Ave & Diversey Pkwy - Charging        |Wilton Ave & Diversey Pkwy - Charging        |    38|\n\n</div>\n:::\n:::\n\n\n@tbl-unlisted-stations summarises stations which appear in `bike_rides` without a corresponding match in the `active_stations` dataset.\n\nThe majority of stations in the table appear to have an operational function.\nThose ending with \"- Charging\" appear to be associated with testing of new charging stations prior to the company publicly announcing their availability.\n\n#### Removing operational and no-return rides\n\nBefore proceeding with further manipulation and cleaning, the observations with identified problems should be removed.\nThis is done using `dplyr::anti_join()` to filter the `bike_rides` dataset removing items matching those found in the `unlisted_stations` and `no_end_coords` data.frames.\n\n\n::: {#tbl-remove-operational .cell tbl-cap='Sample of cleaned data' hash='datacleaning_cache/html/tbl-remove-operational_7ef4de8ac6945371ac6eaf3a192cb25d'}\n\n```{.r .cell-code}\nbike_rides <- bike_rides %>%\n  anti_join(\n    unlisted_stations,\n    by = c(\"start_station_name\" = \"station_name\")\n  ) %>%\n  anti_join(\n    unlisted_stations,\n    by = c(\"end_station_name\" = \"station_name\")\n  ) %>%\n  anti_join(\n    no_end_coords,\n    by = \"ride_id\"\n  ) %>%\n  anti_join(\n    eop_rides_00,\n    by = \"ride_id\"\n  )\n\nbike_rides %>%\n  slice_sample(n = 6)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|ride_id          |bike_type |started_at          |ended_at            |start_station_name       |start_station_id |end_station_name                    |end_station_id | start_lat| start_lng|  end_lat|   end_lng|user_type |user_bike       |\n|:----------------|:---------|:-------------------|:-------------------|:------------------------|:----------------|:-----------------------------------|:--------------|---------:|---------:|--------:|---------:|:---------|:---------------|\n|58010D2D67E74B47 |Classic   |2021-09-08 21:07:13 |2021-09-08 21:21:43 |Broadway & Thorndale Ave |15575            |Marine Dr & Ainslie St              |KA1504000171   |  41.98974| -87.66014| 41.97160| -87.65015|Member    |Member-Classic  |\n|58DB0EBEE79CF420 |Electric  |2022-07-29 18:34:10 |2022-07-29 18:37:05 |NA                       |NA               |NA                                  |NA             |  41.92000| -87.64000| 41.92000| -87.65000|Member    |Member-Electric |\n|EE6566E507FADDB9 |Electric  |2022-08-01 03:52:59 |2022-08-01 03:58:42 |Walden Pkwy & 99th St    |904              |Public Rack - Western Ave & 96th St |991            |  41.71000| -87.67000| 41.72000| -87.68000|Casual    |Casual-Electric |\n|1EDC3CF3E557B3B6 |Classic   |2021-09-28 15:26:32 |2021-09-28 15:34:28 |Paulina St & Flournoy St |KA1504000104     |Aberdeen St & Jackson Blvd          |13157          |  41.87295| -87.66913| 41.87773| -87.65479|Member    |Member-Classic  |\n|FE19A07C51DC6348 |Classic   |2022-08-03 14:13:20 |2022-08-03 14:22:21 |New St & Illinois St     |TA1306000013     |Michigan Ave & Oak St               |13042          |  41.89085| -87.61862| 41.90096| -87.62378|Member    |Member-Classic  |\n|09F575CF252F12AC |Electric  |2021-09-15 16:32:32 |2021-09-15 16:36:35 |Damen Ave & Madison St   |13134            |Damen Ave & Madison St              |13134          |  41.88144| -87.67483| 41.88146| -87.67482|Casual    |Casual-Electric |\n\n</div>\n:::\n:::\n\n\n@tbl-remove-operational shows a sample of the dataset after initial cleaning.\n\n#### Named stations with rounded coordinates\n\nSome named stations were found to have rounded location coordinates.\nAdditionally there is some inaccuracy of reported location coordinates.\n\nTo rectify this, the location and id information for each active station was joined to the rides dataset based on station name.\n\nJoining the `active_station` data also replaces inaccurate bike GPS location data which clusters around stations with a single official location per docking station.\n\n\n::: {.cell}\n\n```{.r .cell-code  caption=\"Clean named station coordinates\"}\nbike_rides <- bike_rides %>%\n  left_join(\n    active_stations,\n    by = c(\"start_station_name\" = \"station_name\")\n  ) %>%\n  select(-timestamp) %>%\n  left_join(\n    active_stations,\n    by = c(\"end_station_name\" = \"station_name\"),\n    suffix = c(\"_start\", \"_end\")\n  ) %>%\n  select(-timestamp) %>%\n  distinct(ride_id, .keep_all = TRUE) %>%\n  mutate(\n    latitude_end = if_else(\n      is.na(latitude_end),\n      end_lat,\n      latitude_end\n    ),\n    longitude_end = if_else(\n      is.na(longitude_end),\n      end_lng,\n      longitude_end\n    ),\n    latitude_start = if_else(\n      is.na(latitude_start),\n      start_lat,\n      latitude_start\n    ),\n    longitude_start = if_else(\n      is.na(longitude_start),\n      start_lng,\n      longitude_start\n    )\n  ) %>%\n  select(-ends_with(\"_lng\"), -ends_with(\"_lat\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  caption=\"Exctract bounding coordinates\"}\nss <- bike_rides %>%\n  mutate(\n    missing = if_else(\n      !is.na(start_station_name),\n      \"Named\",\n      \"Unnamed\"\n    ),\n    ride_day = date(started_at)\n  ) %>%\n  select(ride_day, missing, latitude_start, longitude_start) %>%\n  group_by(missing, latitude_start, longitude_start) %>%\n  summarise(\n    rides = n(),\n    avg_rides = rides / n_distinct(ride_day),\n    .groups = \"drop\"\n  )\n\n\nbounding_box <- ss %>%\n  summarise(\n    left = min(longitude_start) - 0.01,\n    bottom = min(latitude_start) - 0.01,\n    right = max(longitude_start) + 0.01,\n    top = max(latitude_start) + 0.01\n  ) %>%\n  unlist()\n\nchi_map <- get_stamenmap(\n  bounding_box,\n  maptype = \"toner-lite\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(chi_map) +\n  geom_point(\n    data = ss,\n    aes(\n      longitude_start,\n      latitude_start,\n      colour = missing\n    ),\n    size = 1,\n    alpha = 0.75\n  ) +\n  facet_grid(cols = vars(missing)) +\n  guides(colour = \"none\") +\n  scale_colour_manual(values = c(\"#52854C\", \"#D16103\")) +\n  labs(\n    title = \"Named and Unnamed Station locations\",\n    x = \"Longitude\",\n    y = \"Latitude\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![Comparison of location data for named and unnamed stations](datacleaning_files/figure-html/fig-location-compare-1.svg){#fig-location-compare width=672}\n:::\n:::\n\n\n#### Ride duration\n\n##### Adding Ride Duration, Time and Day of Week\n\nTo aid analysis of temporal variation in cohort behaviour, calculated columns for the ride duration, and the hour, day, and month each ride started are added to the dataset.\n\n\n::: {#tbl-add-duration .cell tbl-cap='Sample of rides with added duration, month, date and hour' hash='datacleaning_cache/html/tbl-add-duration_2ab895595dbd1b93d27cc3da43a39e8c'}\n\n```{.r .cell-code}\nbike_rides <- bike_rides %>%\n  mutate(\n    ride_int = started_at %--% ended_at,\n    ride_time = as.duration(ride_int),\n    month = floor_date(as.Date(started_at, tz = \"America/Chicago\"), \"month\"),\n    hour = hour(started_at),\n    dayw = wday(started_at, label = TRUE),\n    daym = day(started_at),\n    .before = start_station_name\n  )\n\nbike_rides %>%\n  select(-ride_id, -ride_int) %>%\n  slice_sample(n = 6)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|bike_type |started_at          |ended_at            |              ride_time|month      | hour|dayw | daym|start_station_name                  |start_station_id |end_station_name               |end_station_id |user_type |user_bike       | id_start| latitude_start| longitude_start| id_end| latitude_end| longitude_end|\n|:---------|:-------------------|:-------------------|----------------------:|:----------|----:|:----|----:|:-----------------------------------|:----------------|:------------------------------|:--------------|:---------|:---------------|--------:|--------------:|---------------:|------:|------------:|-------------:|\n|Classic   |2021-09-08 07:20:07 |2021-09-08 07:30:57 |  650s (~10.83 minutes)|2021-09-01 |    7|Wed  |    8|Artesian Ave & Hubbard St           |15664            |Morgan St & Lake St            |TA1306000015   |Member    |Member-Classic  |      376|       41.88949|       -87.68822|     71|     41.88548|     -87.65230|\n|Classic   |2021-09-19 16:16:14 |2021-09-19 16:35:07 | 1133s (~18.88 minutes)|2021-09-01 |   16|Sun  |   19|Damen Ave & Pierce Ave              |TA1305000041     |Green St & Randolph St         |13053          |Casual    |Casual-Classic  |       69|       41.90940|       -87.67769|    112|     41.88367|     -87.64867|\n|Electric  |2022-08-19 20:52:55 |2022-08-19 20:56:41 |   226s (~3.77 minutes)|2022-08-01 |   20|Fri  |   19|Loomis St & Lexington St            |13332            |Morgan St & Polk St            |TA1307000130   |Member    |Member-Electric |      320|       41.87219|       -87.66150|    241|     41.87174|     -87.65103|\n|Classic   |2022-05-30 22:29:46 |2022-05-30 22:50:48 | 1262s (~21.03 minutes)|2022-05-01 |   22|Mon  |   30|Orleans St & Merchandise Mart Plaza |TA1305000022     |Clark St & Wrightwood Ave      |TA1305000014   |Casual    |Casual-Classic  |      100|       41.88824|       -87.63639|    340|     41.92955|     -87.64312|\n|Electric  |2021-09-24 15:22:29 |2021-09-24 15:37:39 |  910s (~15.17 minutes)|2021-09-01 |   15|Fri  |   24|Ravenswood Ave & Irving Park Rd     |TA1307000149     |NA                             |NA             |Member    |Member-Electric |      244|       41.95469|       -87.67393|     NA|     41.95000|     -87.66000|\n|Electric  |2021-09-26 01:33:34 |2021-09-26 01:48:52 |   918s (~15.3 minutes)|2021-09-01 |    1|Sun  |   26|Desplaines St & Kinzie St           |TA1306000003     |California Ave & Milwaukee Ave |13084          |Casual    |Casual-Electric |       56|       41.88872|       -87.64445|    123|     41.92269|     -87.69715|\n\n</div>\n:::\n:::\n\n\n@tbl-add-duration shows a sample of the resulting dataset with added columns.\nMinimum and maximum ride times can now be checked for plausibility.\n\n\n::: {#tbl-ride-min-max .cell tbl-cap='Summary of ride duration (hours)' hash='datacleaning_cache/html/tbl-ride-min-max_9ec89d53c1a1ad5f23407b3b5fda2a9c'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(\n    Minimum = min(ride_time) / 3600,\n    Maximum = max(ride_time) / 3600\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   Minimum|  Maximum|\n|---------:|--------:|\n| -2.290278| 678.4169|\n\n</div>\n:::\n:::\n\n\nBoth minimum and maximum ride durations indicate the data set contains values which need to be checked, and possibly removed. Ride times of less than zero should not occur and ride times of 28 days are very unlikely given the accrued charges would be around $6500 at casual trip rates.\n\n##### Addressing negative ride durations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike_rides %>%\n  group_by(month) %>%\n  summarise(\n    nrt = mean(ride_time < 0) * 100\n  ) %>%\n  ggplot(aes(month, nrt)) +\n  geom_col() +\n  theme_minimal() +\n  labs(\n    title = \"Rides with negative duration\",\n    x = \"Month\",\n    y = \"Percentage of Rides\"\n  )\n```\n\n::: {.cell-output-display}\n![Distribution of negative ride times by month](datacleaning_files/figure-html/fig-negative-ride-duration-1.svg){#fig-negative-ride-duration width=672}\n:::\n:::\n\n::: {#tbl-days-neg-rides .cell tbl-cap='Days with negative ride time'}\n\n```{.r .cell-code}\nbike_rides %>%\n  group_by(\n    Month = month,\n    Day = daym\n  ) %>%\n  summarise(\n    \"Percent Negative\" = mean(ride_time < 0) * 100,\n    .groups = \"drop\"\n  ) %>%\n  filter(`Percent Negative` > 0) %>%\n  slice_max(`Percent Negative`, n = 6)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Month      | Day| Percent Negative|\n|:----------|---:|----------------:|\n|2021-11-01 |   7|        0.2781276|\n|2021-09-01 |  29|        0.0930941|\n|2022-07-01 |  26|        0.0466781|\n|2022-06-01 |   7|        0.0436660|\n|2022-08-01 |  27|        0.0217675|\n|2021-09-01 |   1|        0.0159962|\n\n</div>\n:::\n:::\n\n\n@fig-negative-ride-duration and @tbl-days-neg-rides show that the percentage rides with negative durations is around three times higher on 7th November than the next highest day - 29th September.\n\n\n::: {#tbl-hour-neg-rides .cell tbl-cap='Negative ride duration by hour'}\n\n```{.r .cell-code}\nbike_rides %>%\n  filter(\n    month(started_at) == 11,\n    day(started_at) == 7\n  ) %>%\n  group_by(Hour = hour(started_at)) %>%\n  summarise(\n    \"Percent Negative\" = mean(ride_time < 0) * 100,\n    Count = sum(ride_time < 0)\n  ) %>%\n  filter(`Percent Negative` > 0)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Hour| Percent Negative| Count|\n|----:|----------------:|-----:|\n|    1|         10.51587|    53|\n\n</div>\n:::\n:::\n\n\n@tbl-hour-neg-rides shows that all negative ride durations on 7th November were taken between 1.00am and 2.00am.\nThis coincides with the end of daylight savings in Chicago.\nAt 2.00am clocks went back one hour to 1.00am.\n\nRide start and end timestamp values in the dataset do not include timezone information.\nTimestamps between 1.00am and 2.00am could refer to either Central Daylight Time or Central Standard Time meaning there is an ambiguity which is very difficult to resolve.\n\nThe negative duration of rides which start and end between 1.00am and 2.00am can be resolved by adding 60 minutes.\nHowever the ambiguity of the rides which have one end point in this time range remains.\n\nI recommend that timezone be recorded as part of the timestamp in future to avoid these issues.\n\nFor the present analysis I've chosen to correct the negative timestamps between 1.00am and 2.00am and to leave the ambiguous timestamps unaltered.\n\n\n::: {.cell}\n\n```{.r .cell-code  caption=\"Correct dst change ride durations\"}\nbike_rides <- bike_rides %>%\n  mutate(ride_time = if_else(\n    (ride_time < 0) & (date(started_at) == date(\"2021-11-07\")),\n    ride_time + 3600,\n    ride_time\n  ))\n```\n:::\n\n\n##### Other ride duration issues\n\nThe [Cyclistic website](https://ride.divvybikes.com/system-data) indicates that rides of less than 60 seconds have been removed from the dataset.\nCyclistic help pages note that if rides [exceed 24 hours](https://help.divvybikes.com/hc/en-us/articles/360033123412-My-bike-was-lost-or-stolen) the bike is treated as stolen and the user can be fined \\$1200.\n\nThese types of rides should not be present.\n\n\n::: {#tbl-short-long .cell tbl-cap='Trips less than 60 seconds and more than 24 hours'}\n\n```{.r .cell-code}\nbike_rides %>%\n  summarise(\n    \"< 60 seconds\" = sum(ride_time < 60),\n    \"> 24 hours\" = sum(ride_time > 86000)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| < 60 seconds| > 24 hours|\n|------------:|----------:|\n|       110497|        429|\n\n</div>\n:::\n:::\n\n\nThe significant number of short trips indicate these have not been removed from the data prior to upload.\nThese short rides and rides which can be classified as stolen are removed.\n\n\n::: {.cell}\n\n```{.r .cell-code  caption=\"Filter short and long \"}\nbike_rides <- bike_rides %>%\n  filter(\n    ride_time > 60,\n    ride_time < 86000\n  )\n```\n:::\n\n\nWith cleaning completed the processed dataset is saved as a `RDS` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(bike_rides, \"data/processed/bike_rides.rds\", compress = \"gz\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}